import { Analyseur, Compilateur, EClasseRacine, Genre, Nombre } from "../../public-api";

import { AnalyseurElementSimple } from "../utils/compilation/analyseur/analyseur.element.simple";
import { AnalyseurUtils } from "../utils/compilation/analyseur/analyseur.utils";
import { ContexteAnalyse } from "../models/compilateur/contexte-analyse";
import { ExprReg } from "../utils/compilation/expr-reg";
import { ResultatAnalysePhrase } from "../models/compilateur/resultat-analyse-phrase";

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
//    [1/1] EXPRESSIONS R√âGULI√àRES
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

describe('Epressions r√©guli√®res ‚àí D√©finition d‚Äôune liste', () => {

  it('Def. liste : ¬´‚ÄØLes nombres gagnants sont une liste‚ÄØ¬ª', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec('Les nombres gagnants sont une liste');
    expect(result[1]).toEqual("Les "); // d√©terminant
    expect(result[2]).toEqual("nombres"); // nom
    expect(result[3]).toEqual("gagnants"); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("liste"); // classe
    expect(result[6]).toBeUndefined(); // attribut
    expect(result[7]).toBeUndefined(); // position
    expect(result[8]).toBeUndefined(); // compl√©ment
    expect(result[9]).toBeUndefined(); // ici
  });

  it('Def. liste : ¬´‚ÄØLes vainqueurs sont une liste‚ÄØ¬ª', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec('Les vainqueurs sont une liste');
    expect(result[1]).toEqual("Les "); // d√©terminant
    expect(result[2]).toEqual("vainqueurs"); // nom
    expect(result[3]).toBeUndefined(); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("liste"); // classe
    expect(result[6]).toBeUndefined(); // attribut
    expect(result[7]).toBeUndefined(); // position
    expect(result[8]).toBeUndefined(); // compl√©ment
    expect(result[9]).toBeUndefined(); // ici
  });

  it('Def. liste : ¬´‚ÄØBruxelles est une liste‚ÄØ¬ª', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec('Bruxelles est une liste');
    expect(result[1]).toBeUndefined(); // d√©terminant
    expect(result[2]).toEqual("Bruxelles"); // nom
    expect(result[3]).toBeUndefined(); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("liste"); // classe
    expect(result[6]).toBeUndefined(); // attribut
    expect(result[7]).toBeUndefined(); // position
    expect(result[8]).toBeUndefined(); // compl√©ment
    expect(result[9]).toBeUndefined(); // ici
  });

});

describe('Epressions r√©guli√®res ‚àí Contenu d‚Äôune liste', () => {

  it('Cont. liste : ¬´‚ÄØElle contient 200‚ÄØ¬ª', () => {
    const result = ExprReg.xPronomPersonnelContenu.exec('Elle contient 200');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("200") // √©l√©ment jeu
  });

  it('Cont. liste : ¬´‚ÄØElle inclut 7, 21 et 9‚ÄØ¬ª', () => {
    const result = ExprReg.xPronomPersonnelContenu.exec('Elle contient 7, 21 et 9');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("7, 21 et 9") // √©l√©ment jeu
  });

  it('Cont. liste : ¬´‚ÄØElle contient la cuisine et le salon‚ÄØ¬ª', () => {
    const result = ExprReg.xPronomPersonnelContenu.exec('Elle contient la cuisine et le salon');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("la cuisine et le salon") // √©l√©ment jeu
  });

  it('Cont. liste : ¬´‚ÄØIls contiennent "Alice", "Bob", "Carole" et "David"‚ÄØ¬ª', () => {
    const result = ExprReg.xPronomPersonnelContenu.exec('Ils contiennent "Alice", "Bob", "Carole" et "David"');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual('"Alice", "Bob", "Carole" et "David"') // √©l√©ment jeu
  });

  it('Cont. liste : ¬´‚ÄØBob contient 200‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xPronomPersonnelContenu.exec('Bob contient 200');
    expect(result).toEqual(null);
  });

});

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
//    [2/2] ANALYSEUR
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

describe('Analyseur ‚àí D√©finition d‚Äôune liste et de ses valeurs', () => {

  // =========================================================
  // √âL√âMENTS SANS POSITION
  // =========================================================

  it('√âl√©ment sans pos: ¬´‚ÄØLes nombres gagnants sont une liste. Elle contient 7, 21 et 9.‚ÄØ¬ª', () => {
    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      'Les nombres gagnants sont une liste. Elle contient 7, 21 et 9.'
    );
    expect(phrases).toHaveSize(2); // 2 phrases
    expect(phrases[0].phrase).toHaveSize(1); // 1 morceau
    expect(phrases[1].phrase).toHaveSize(1); // 1 morceau
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(Analyseur.analyserPhrase(phrases[1], ctxAnalyse)).toBe(ResultatAnalysePhrase.pronomPersonnelContenuListe);
    // tester l‚Äôanalyse sp√©cifique
    const el = AnalyseurElementSimple.testerElementSansPosition(phrases[0], ctxAnalyse); // analyser phrase
    expect(el).not.toBeNull(); // √©l√©ment trouv√©
    ctxAnalyse.dernierElementGenerique = el; // dernier √©l√©ment trouv√©
    expect(el.determinant).toEqual('les '); // d√©terminant
    expect(el.nom).toEqual('nombres'); // nom
    expect(el.epithete).toEqual('gagnants'); // √©pith√®te pas d√©fini
    expect(el.genre).toEqual(Genre.m); // genre
    expect(el.nombre).toEqual(Nombre.p); // nombre
    expect(el.quantite).toEqual(-1); // quantit√©
    expect(el.classeIntitule).not.toBeNull(); // intitul√© classe d√©fini
    expect(el.classeIntitule).toEqual(EClasseRacine.liste); // intitul√© classe
    expect(el.positionString).toBeNull(); // position pas d√©finie
    AnalyseurUtils.ajouterDescriptionDernierElement(phrases[0], ctxAnalyse); // ajout description √©ventuelle
    expect(el.description).toBeNull(); // desrcription pas d√©finie
    expect(el.capacites).toHaveSize(0); // aucune capacit√©
    expect(el.attributs).toHaveSize(0); // aucun attribut
    expect(el.proprietes).toHaveSize(0); // aucune propri√©t√©
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

  });

});