import { AnalyseurBeta } from "../utils/compilation/analyseur/analyseur-beta";
import { AnalyseurType } from "../utils/compilation/analyseur/analyseur.type";
import { CompilateurBeta } from "../utils/compilation/compilateur-beta";
import { ContexteAnalyse } from "../models/compilateur/contexte-analyse";
import { Definition } from "../models/compilateur/definition";
import { ExprReg } from "../utils/compilation/expr-reg";
import { Nombre } from "../models/commun/nombre.enum";
import { ResultatAnalysePhrase } from "../models/compilateur/resultat-analyse-phrase";

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
//    [1/2] EXPRESSIONS R√âGULI√àRES
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
describe('Epressions r√©guli√®res ‚àí Nouveaux types (classes)', () => {

    // TYPE UTILISATEUR > NOUVEAU TYPE
    // - un/une(1) nouveauType(2) est un/une typeParent(3) {attributs}(4)

    it('Nouveau type‚ÄØ:  ¬´‚ÄØUn meuble est un objet‚ÄØ¬ª', () => {
        const result = ExprReg.xNouveauType.exec("Un meuble est un objet");
        expect(result).not.toEqual(null);
        expect(result[1]).toEqual("Un"); // d√©terminant
        expect(result[2]).toEqual("meuble"); // nouveau type
        expect(result[3]).toEqual("objet"); // type parent
        expect(result[4]).toBeUndefined(); // attribut(s)
    });

    it('Nouveau type‚ÄØ:  ¬´‚ÄØUn fruit est un objet mangeable, l√©ger et p√©rissable‚ÄØ¬ª', () => {
        const result = ExprReg.xNouveauType.exec("Un fruit est un objet mangeable, l√©ger et p√©rissable");
        expect(result).not.toEqual(null);
        expect(result[1]).toEqual("Un"); // d√©terminant
        expect(result[2]).toEqual("fruit"); // nouveau type
        expect(result[3]).toEqual("objet"); // type parent
        expect(result[4]).toEqual("mangeable, l√©ger et p√©rissable"); // attribut(s)
    });

    it('Nouveau type‚ÄØ:  ¬´‚ÄØun lutin est une personne bavarde‚ÄØ¬ª', () => {
        const result = ExprReg.xNouveauType.exec("un lutin est une personne bavarde");
        expect(result).not.toEqual(null);
        expect(result[1]).toEqual("un"); // d√©terminant
        expect(result[2]).toEqual("lutin"); // nouveau type
        expect(result[3]).toEqual("personne"); // type parent
        expect(result[4]).toEqual("bavarde"); // attribut(s)
    });


    it('Nouveau type‚ÄØ:  ¬´‚ÄØle lutin est une personne bavarde‚ÄØ¬ª (üí•)', () => {
        const result = ExprReg.xNouveauType.exec("le lutin est une personne bavarde");
        expect(result).toEqual(null);
    });

    it('Nouveau type‚ÄØ:  ¬´‚ÄØUn meuble est fix√©‚ÄØ¬ª (üí•)', () => {
        const result = ExprReg.xNouveauType.exec("Un meuble est fix√©");
        expect(result).toEqual(null);
    });

    // TYPE UTILISATEUR > PR√âCISION TYPE
    // - un/une(1) type(2) est {attributs}(3)

    it('Pr√©cision type‚ÄØ:  ¬´‚ÄØUn meuble est fix√©‚ÄØ¬ª', () => {
        const result = ExprReg.xPrecisionType.exec("Un meuble est fix√©");
        expect(result).not.toEqual(null);
        expect(result[1]).toEqual("Un"); // d√©terminant
        expect(result[2]).toEqual("meuble"); // nouveau type
        expect(result[3]).toEqual("fix√©"); // attribut(s)
    });

    it('Pr√©cision type‚ÄØ:  ¬´‚ÄØun chien est affectueux et poilu‚ÄØ¬ª', () => {
        const result = ExprReg.xPrecisionType.exec("un chien est affectueux et poilu");
        expect(result).not.toEqual(null);
        expect(result[1]).toEqual("un"); // d√©terminant
        expect(result[2]).toEqual("chien"); // nouveau type
        expect(result[3]).toEqual("affectueux et poilu"); // attribut(s)
    });

    it('Pr√©cision type‚ÄØ:  ¬´‚ÄØUn lutin est bavard, peureux et farceur‚ÄØ¬ª', () => {
        const result = ExprReg.xPrecisionType.exec("Un lutin est bavard, peureux et farceur");
        expect(result).not.toEqual(null);
        expect(result[1]).toEqual("Un"); // d√©terminant
        expect(result[2]).toEqual("lutin"); // nouveau type
        expect(result[3]).toEqual("bavard, peureux et farceur"); // attribut(s)
    });

    it('Pr√©cision type‚ÄØ:  ¬´‚ÄØUn meuble est un objet‚ÄØ¬ª (üí•)', () => {
        const result = ExprReg.xPrecisionType.exec("Un meuble est un objet");
        expect(result).toEqual(null);
    });

    it('Pr√©cision type‚ÄØ:  ¬´‚ÄØUn fruit est un objet mangeable, l√©ger et p√©rissable‚ÄØ¬ª (üí•)', () => {
        const result = ExprReg.xPrecisionType.exec("Un fruit est un objet mangeable, l√©ger et p√©rissable");
        expect(result).toEqual(null);
    });

    it('Pr√©cision type‚ÄØ:  ¬´‚ÄØUn lutin est une personne bavarde‚ÄØ¬ª (üí•)', () => {
        const result = ExprReg.xPrecisionType.exec("Un lutin est une personne bavarde");
        expect(result).toEqual(null);
    });

    it('Pr√©cision type‚ÄØ:  ¬´‚ÄØLe meuble est fix√©‚ÄØ¬ª (üí•)', () => {
        const result = ExprReg.xPrecisionType.exec("Le meuble est fix√©");
        expect(result).toEqual(null);
    });

});

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
//    [2/2] ANALYSEUR
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV


describe('Analyseur ‚àí Nouveaux types (classes)', () => {

    // =========================================================
    // NOUVEAUX TYPES
    // =========================================================

    it('Nouveau type‚ÄØ: ¬´‚ÄØUn meuble est un objet.‚ÄØ¬ª ', () => {
        let ctxAnalyse = new ContexteAnalyse();
        let phrases = CompilateurBeta.convertirCodeSourceEnPhrases(
            "Un meuble est un objet."
        );
        expect(phrases).toHaveSize(1); // 1 phrase
        expect(phrases[0].morceaux).toHaveSize(1); // 1 morceau
        // tester l‚Äôanalyse compl√®te
        expect(AnalyseurBeta.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.type);
        // tester l‚Äôanalyse sp√©cifique
        ctxAnalyse = new ContexteAnalyse(); // (raz contexte)
        const resultat = AnalyseurType.testerNouveauType(phrases[0], ctxAnalyse);
        expect(resultat).toEqual(ResultatAnalysePhrase.type); // trouv√© un nouveau type
        expect(ctxAnalyse.typesUtilisateur).toHaveSize(1); // nouveau type ajout√©
        expect(ctxAnalyse.typesUtilisateur.has('meuble')).toBeTrue(); // nouveau type retrouv√©
        expect(ctxAnalyse.typesUtilisateur.get('meuble').intitule).toBe('meuble'); // intitul√©
        expect(ctxAnalyse.typesUtilisateur.get('meuble').nombre).toBe(Nombre.s); // nombre
        expect(ctxAnalyse.typesUtilisateur.get('meuble').typeParent).toBe('objet'); // type parent
        expect(ctxAnalyse.typesUtilisateur.get('meuble').etats).toHaveSize(0); // aucun attribut sp√©cifique
        expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

    });

    it('Nouveau type‚ÄØ: ¬´‚ÄØUne f√©e est une personne magique.‚ÄØ¬ª ', () => {
        let ctxAnalyse = new ContexteAnalyse();
        let phrases = CompilateurBeta.convertirCodeSourceEnPhrases(
            "Une f√©e est une personne magique."
        );
        expect(phrases).toHaveSize(1); // 1 phrase
        expect(phrases[0].morceaux).toHaveSize(1); // 1 morceau
        // tester l‚Äôanalyse compl√®te
        expect(AnalyseurBeta.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.type);
        // tester l‚Äôanalyse sp√©cifique
        ctxAnalyse = new ContexteAnalyse(); // (raz contexte)
        const resultat = AnalyseurType.testerNouveauType(phrases[0], ctxAnalyse);
        expect(resultat).toEqual(ResultatAnalysePhrase.type); // trouv√© un nouveau type
        expect(ctxAnalyse.typesUtilisateur).toHaveSize(1); // nouveau type ajout√©
        expect(ctxAnalyse.typesUtilisateur.has('fee')).toBeTrue(); // nouveau type retrouv√©
        expect(ctxAnalyse.typesUtilisateur.get('fee').intitule).toBe('f√©e'); // intitul√©
        expect(ctxAnalyse.typesUtilisateur.get('fee').nombre).toBe(Nombre.s); // nombre
        expect(ctxAnalyse.typesUtilisateur.get('fee').typeParent).toBe('personne'); // type parent
        expect(ctxAnalyse.typesUtilisateur.get('fee').etats).toHaveSize(1); // attribut sp√©cifique d√©fini
        expect(ctxAnalyse.typesUtilisateur.get('fee').etats[0]).toBe('magique'); // attribut sp√©cifique
        expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

    });

    it('Nouveau type‚ÄØ: ¬´‚ÄØUne f√©e est magique.‚ÄØ¬ª (üí•)', () => {
        let ctxAnalyse = new ContexteAnalyse();
        let phrases = CompilateurBeta.convertirCodeSourceEnPhrases(
            "Une f√©e est magique."
        );
        expect(phrases).toHaveSize(1); // 1 phrase
        expect(phrases[0].morceaux).toHaveSize(1); // 1 morceau
        // tester l‚Äôanalyse compl√®te
        expect(AnalyseurBeta.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.precisionType);
        // tester l‚Äôanalyse sp√©cifique      
        ctxAnalyse = new ContexteAnalyse(); // (raz contexte)
        const resultat = AnalyseurType.testerNouveauType(phrases[0], ctxAnalyse);
        expect(resultat).toEqual(ResultatAnalysePhrase.aucun); // pas trouv√© un nouveau type
        expect(ctxAnalyse.typesUtilisateur).toHaveSize(0); // pas de nouveau type ajout√©
        expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

    });


    it('Nouveau type‚ÄØ: ¬´‚ÄØLa f√©e est une personne.‚ÄØ¬ª (üí•)', () => {
        let ctxAnalyse = new ContexteAnalyse();
        let phrases = CompilateurBeta.convertirCodeSourceEnPhrases(
            "La f√©e est une personne."
        );
        expect(phrases).toHaveSize(1); // 1 phrase
        expect(phrases[0].morceaux).toHaveSize(1); // 1 morceau
        // tester l‚Äôanalyse compl√®te
        expect(AnalyseurBeta.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
        // tester l‚Äôanalyse sp√©cifique
        ctxAnalyse = new ContexteAnalyse(); // (raz contexte)
        const resultat = AnalyseurType.testerNouveauType(phrases[0], ctxAnalyse);
        expect(resultat).toEqual(ResultatAnalysePhrase.aucun); // pas trouv√© un nouveau type
        expect(ctxAnalyse.typesUtilisateur).toHaveSize(0); // pas de nouveau type ajout√©
        expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

    });

    // =========================================================
    // PR√âCISIONS TYPES
    // =========================================================

    it('Pr√©cision type‚ÄØ: ¬´‚ÄØUne statue est fix√©e.‚ÄØ¬ª ', () => {
        let ctxAnalyse = new ContexteAnalyse();
        let phrases = CompilateurBeta.convertirCodeSourceEnPhrases(
            "Une statue est fix√©e."
        );
        expect(phrases).toHaveSize(1); // 1 phrase
        expect(phrases[0].morceaux).toHaveSize(1); // 1 morceau
        // tester l‚Äôanalyse compl√®te
        expect(AnalyseurBeta.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.precisionType);
        // tester l‚Äôanalyse sp√©cifique
        ctxAnalyse = new ContexteAnalyse(); // (raz contexte)
        const resultat = AnalyseurType.testerPrecisionType(phrases[0], ctxAnalyse);
        expect(resultat).toEqual(ResultatAnalysePhrase.precisionType); // trouv√© un nouveau type
        expect(ctxAnalyse.typesUtilisateur).toHaveSize(1); // nouveau type ajout√©
        expect(ctxAnalyse.typesUtilisateur.has('statue')).toBeTrue(); // nouveau type retrouv√©
        expect(ctxAnalyse.typesUtilisateur.get('statue').intitule).toBe('statue'); // intitul√©
        expect(ctxAnalyse.typesUtilisateur.get('statue').nombre).toBe(Nombre.s); // nombre
        expect(ctxAnalyse.typesUtilisateur.get('statue').typeParent).toBe('objet'); // type parent
        expect(ctxAnalyse.typesUtilisateur.get('statue').etats).toHaveSize(1); // attribut sp√©cifique
        expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

    });

    it('Pr√©cision type‚ÄØ: ¬´‚ÄØUn lutin est bavard, farceur et petit.‚ÄØ¬ª ', () => {
        let ctxAnalyse = new ContexteAnalyse();
        let phrases = CompilateurBeta.convertirCodeSourceEnPhrases(
            "Un lutin est bavard, farceur et petit."
        );
        expect(phrases).toHaveSize(1); // 1 phrase
        expect(phrases[0].morceaux).toHaveSize(1); // 1 morceau
        // tester l‚Äôanalyse compl√®te
        expect(AnalyseurBeta.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.precisionType);
        // tester l‚Äôanalyse sp√©cifique
        // -> raz contexte
        ctxAnalyse = new ContexteAnalyse();
        // -> pr√©-remplir avec le type ¬´ lutin ¬ª qui h√©rite de personne
        ctxAnalyse.typesUtilisateur.set('lutin', new Definition('lutin', 'personne', Nombre.s, ['gentil']));
        const resultat = AnalyseurType.testerPrecisionType(phrases[0], ctxAnalyse);
        expect(resultat).toEqual(ResultatAnalysePhrase.precisionType); // trouv√© un nouveau type
        expect(ctxAnalyse.typesUtilisateur).toHaveSize(1); // pas de nouveau type ajout√©
        expect(ctxAnalyse.typesUtilisateur.has('lutin')).toBeTrue(); // type existant retrouv√©
        expect(ctxAnalyse.typesUtilisateur.get('lutin').intitule).toBe('lutin'); // intitul√©
        expect(ctxAnalyse.typesUtilisateur.get('lutin').nombre).toBe(Nombre.s); // nombre
        expect(ctxAnalyse.typesUtilisateur.get('lutin').typeParent).toBe('personne'); // type parent
        expect(ctxAnalyse.typesUtilisateur.get('lutin').etats).toHaveSize(4); // attributs sp√©cifiques (1 + 3)
        expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

    });

    it('Pr√©cision type‚ÄØ: Type d√©fini 2x doit g√©n√©rer erreur', () => {
        let ctxAnalyse = new ContexteAnalyse();
        let phrases = CompilateurBeta.convertirCodeSourceEnPhrases(
            "Un lutin est une personne farceuse. Un lutin est une cr√©ature-magique aimable."
        );
        expect(phrases).toHaveSize(2); // 2 phrases
        // tester l‚Äôanalyse compl√®te
        expect(AnalyseurBeta.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.type);
        expect(AnalyseurBeta.analyserPhrase(phrases[1], ctxAnalyse)).toBe(ResultatAnalysePhrase.type);
        expect(ctxAnalyse.typesUtilisateur).toHaveSize(1); // 1 nouveau type ajout√© (et pas 2)
        expect(ctxAnalyse.typesUtilisateur.has('lutin')).toBeTrue(); // type existant retrouv√©
        expect(ctxAnalyse.typesUtilisateur.get('lutin').intitule).toBe('lutin'); // intitul√©
        expect(ctxAnalyse.typesUtilisateur.get('lutin').nombre).toBe(Nombre.s); // nombre
        expect(ctxAnalyse.typesUtilisateur.get('lutin').typeParent).toBe('creature-magique'); // type parent
        expect(ctxAnalyse.typesUtilisateur.get('lutin').etats).toHaveSize(2); // attributs sp√©cifiques (1+1)
        expect(ctxAnalyse.erreurs).toHaveSize(1); // 1 erreur a √©t√© g√©n√©r√©e
    });

});