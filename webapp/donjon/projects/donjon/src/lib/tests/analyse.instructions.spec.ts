import { ExprReg } from "../utils/compilation/expr-reg";
import { GroupeNominal } from "../models/commun/groupe-nominal";
import { PhraseUtils } from "../utils/commun/phrase-utils";

describe('Epressions r√©guli√®res ‚àí Instruction: verbe + compl√©ment', () => {

    // Instruction : verbe + compl√©ment

    it('Phrase:  ¬´‚ÄØcontinuer l‚Äôaction‚ÄØ¬ª', () => {
        const result = ExprReg.xInstruction.exec("continuer l‚Äôaction");
        expect(result).not.toBeNull();
        expect(result[1]).toEqual("continuer"); // verbe
        expect(result[2]).toEqual("l‚Äôaction"); // compl√©ment
    });

    it('Phrase:  ¬´‚ÄØchanger le joueur poss√®de la canne √† p√®che‚ÄØ¬ª', () => {
        const result = ExprReg.xInstruction.exec("changer le joueur poss√®de la canne √† p√®che");
        expect(result).not.toBeNull();
        expect(result[1]).toEqual("changer"); // verbe
        expect(result[2]).toEqual("le joueur poss√®de la canne √† p√®che"); // compl√©ment
    });

    it('Phrase:  ¬´‚ÄØdire ‚ÄØ¬ª', () => {
        const result = ExprReg.xInstruction.exec("dire ");
        expect(result).not.toBeNull();
        expect(result[1]).toEqual("dire"); // verbe
        expect(result[2]).toBeUndefined(); // compl√©ment
    });

    it('Phrase:  ¬´‚ÄØdire "Bonjour !"‚ÄØ¬ª', () => {
        const result = ExprReg.xInstruction.exec("dire \"Bonjour !\"");
        expect(result).not.toBeNull();
        expect(result[1]).toEqual("dire"); // verbe
        expect(result[2]).toEqual("\"Bonjour !\""); // compl√©ment
    });

    it('Phrase: ¬´‚ÄØchanger le score augmente de 1‚ÄØ¬ª', () => {
        const result = ExprReg.xInstruction.exec("changer le score augmente de 1");
        expect(result).not.toBeNull();
        expect(result[1]).toEqual("changer"); // verbe
        expect(result[2]).toEqual("le score augmente de 1"); // compl√©ment
    });

    it('Phrase:  ¬´‚ÄØla pomme est verte‚ÄØ¬ª (üí•)', () => {
        const result = ExprReg.xInstruction.exec("la pomme est verte");
        expect(result).toBeNull();
    });
    
});

describe('Epressions r√©guli√®res ‚àí Compl√©ment instruction: Phrase simple avec un verbe conjug√©', () => {

    // [le|la|les|...]\(1) (nom|ceci|cela)\(2) [attribut]\(3) [ne|n‚Äô|n'] ([se] verbe conjug√©)(4) [pas|plus]\(5) compl√©ment(6).

    it('Phrase:  ¬´‚ÄØla porte secr√®te n‚Äôest plus ferm√©e‚ÄØ¬ª', () => {
        const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("la porte secr√®te n‚Äôest plus ferm√©e");
        expect(result).not.toEqual(null);
        expect(result[1]).toEqual("la "); // d√©terminant
        expect(result[2]).toEqual("porte"); // nom
        expect(result[3]).toEqual("secr√®te"); // attribut
        expect(result[4]).toEqual("est"); // verbe conjugu√©
        expect(result[5]).toEqual("plus"); // n√©gation
        expect(result[6]).toEqual("ferm√©e"); // compl√©ment
    });

    it('Phrase:  ¬´‚ÄØla canne √† p√®che rouge est ouverte‚ÄØ¬ª', () => {
        const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("la canne √† p√®che rouge est ouverte");
        expect(result).not.toBeNull();
        expect(result[1]).toEqual("la "); // d√©terminant
        expect(result[2]).toEqual("canne √† p√®che"); // nom
        expect(result[3]).toEqual("rouge"); // attribut
        expect(result[4]).toEqual("est"); // verbe conjugu√©
        expect(result[5]).toBeUndefined() // n√©gation
        expect(result[6]).toEqual("ouverte"); // compl√©ment
    });

    it('Phrase:  ¬´‚ÄØceci n‚Äôest plus vide‚ÄØ¬ª', () => {
        const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("ceci n‚Äôest plus vide");
        expect(result).not.toBeNull();
        expect(result[1]).toBeUndefined(); // d√©terminant
        expect(result[2]).toEqual("ceci"); // nom
        expect(result[3]).toBeUndefined(); // attribut
        expect(result[4]).toEqual("est"); // verbe conjugu√©
        expect(result[5]).toEqual("plus"); // n√©gation
        expect(result[6]).toEqual("vide"); // compl√©ment
    });

    it('Phrase:  ¬´‚ÄØle score augmente de 1‚ÄØ¬ª', () => {
        const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("le score augmente de 1");
        expect(result).not.toBeNull();
        expect(result[1]).toEqual('le '); // d√©terminant
        expect(result[2]).toEqual("score"); // nom
        expect(result[3]).toBeUndefined(); // attribut
        expect(result[4]).toEqual("augmente"); // verbe conjugu√©
        expect(result[5]).toBeUndefined(); // n√©gation
        expect(result[6]).toEqual("de 1"); // compl√©ment
    });

    it('Phrase:  ¬´‚ÄØl‚Äôaction‚ÄØ¬ª (üí•)', () => {
        const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("l‚Äôaction");
        expect(result).toEqual(null);
    });
    
});

describe('Epressions r√©guli√®res ‚àí Compl√©ment instruction (1 ou 2 √©l√©ments)', () => {

    // => d√©terminant(1) nom(2) √©pith√®te(3) pr√©position(4) d√©terminant(5) nom(6) √©pith√®te(7).

    it('Compl√©ment:  ¬´‚ÄØl\'action‚ÄØ¬ª', () => {
        const result = ExprReg.xComplementInstruction1ou2elements.exec("l'action");
        expect(result).not.toBeNull();
        expect(result[1]).toEqual("l'"); // d√©terminant 1
        expect(result[2]).toEqual("action"); // nom 1
        expect(result[3]).toBeUndefined(); // √©pith√®te 1
        expect(result[4]).toBeUndefined(); // pr√©position
        expect(result[5]).toBeUndefined(); // d√©terminant 2
        expect(result[6]).toBeUndefined(); // nom 2
        expect(result[7]).toBeUndefined(); // √©pith√®te 2
    });

    it('Compl√©ment:  ¬´‚ÄØtomate‚ÄØ¬ª', () => {
        const result = ExprReg.xComplementInstruction1ou2elements.exec("tomate");
        expect(result).not.toBeNull();
        expect(result[1]).toBeUndefined(); // d√©terminant 1
        expect(result[2]).toEqual("tomate"); // nom 1
        expect(result[3]).toBeUndefined(); // √©pith√®te 1
        expect(result[4]).toBeUndefined(); // pr√©position
        expect(result[5]).toBeUndefined(); // d√©terminant 2
        expect(result[6]).toBeUndefined(); // nom 2
        expect(result[7]).toBeUndefined(); // √©pith√®te 2
    });

    it('Compl√©ment:  ¬´‚ÄØle tr√©sor vers le joueur‚ÄØ¬ª', () => {
        const result = ExprReg.xComplementInstruction1ou2elements.exec("le tr√©sor vers le joueur");
        expect(result).not.toBeNull();
        expect(result[1]).toEqual("le "); // d√©terminant 1
        expect(result[2]).toEqual("tr√©sor"); // nom 1
        expect(result[3]).toBeUndefined(); // √©pith√®te 1
        expect(result[4]).toEqual("vers"); // pr√©position
        expect(result[5]).toEqual("le "); // d√©terminant 2
        expect(result[6]).toEqual("joueur"); // nom 2
        expect(result[7]).toBeUndefined(); // √©pith√®te 2
    });

    
    it('Compl√©ment:  ¬´‚ÄØl‚Äôarc √† fl√®ches rouill√© avec la fl√®che rouge‚ÄØ¬ª', () => {
        const result = ExprReg.xComplementInstruction1ou2elements.exec("l‚Äôarc √† fl√®ches rouill√© avec la fl√®che rouge");
        expect(result).not.toBeNull();
        expect(result[1]).toEqual("l‚Äô"); // d√©terminant 1
        expect(result[2]).toEqual("arc √† fl√®ches"); // nom 1
        expect(result[3]).toEqual("rouill√©"); // √©pith√®te 1
        expect(result[4]).toEqual("avec"); // pr√©position
        expect(result[5]).toEqual("la "); // d√©terminant 2
        expect(result[6]).toEqual("fl√®che"); // nom 2
        expect(result[7]).toEqual("rouge"); // √©pith√®te 2
    });

    it('Compl√©ment:  ¬´‚ÄØmanger le biscuit‚ÄØ¬ª (üí•)', () => {
        const result = ExprReg.xComplementInstruction1ou2elements.exec("manger le biscuit");
        expect(result).toBeNull();
    });

});

describe('PhrasesUtils ‚àí decomposerInstruction', () => {

    // TYPE UTILISATEUR > NOUVEAU TYPE
    // - un/une(1) nouveauType(2) est un/une typeParent(3) {attributs}(4)

    it('Instruction‚ÄØ:  ¬´‚ÄØcontinuer l‚Äôaction‚ÄØ¬ª', () => {
        const result = PhraseUtils.decomposerInstruction("continuer l‚Äôaction");
        expect(result).not.toBeNull();
        expect(result.infinitif).toEqual("continuer");
        expect(result.sujet.determinant).toEqual("l‚Äô");
        expect(result.sujet.nom).toEqual("action");
        expect(result.sujet).toEqual(new GroupeNominal("l‚Äô", "action"));
        expect(result.complement1).toBeNull();
        expect(result.sujetComplement1).toBeUndefined();
        expect(result.sujetComplement2).toBeUndefined();
        expect(result.sujetComplement3).toBeUndefined();
        expect(result.sujetComplement4).toBeUndefined();
    });

    
    it('Instruction‚ÄØ:  ¬´‚ÄØchanger le joueur poss√®de la canne √† p√®che‚ÄØ¬ª', () => {
        const result = PhraseUtils.decomposerInstruction("changer le joueur poss√®de la canne √† p√®che");
        expect(result).not.toBeNull();
        expect(result.infinitif).toEqual("changer");
        expect(result.sujet).toEqual(new GroupeNominal("le ", "joueur"));
        expect(result.verbe).toEqual("poss√®de");
        expect(result.complement1).toBe("la canne √† p√®che");
        expect(result.sujetComplement1).toEqual(new GroupeNominal("la ", "canne √† p√®che"));
        expect(result.sujetComplement2).toBeUndefined();
        expect(result.sujetComplement3).toBeUndefined();
        expect(result.sujetComplement4).toBeUndefined();
    });
});