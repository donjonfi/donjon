import { ExprReg } from "../utils/compilation/expr-reg";
import { GroupeNominal } from "../models/commun/groupe-nominal";
import { PhraseUtils } from "../utils/commun/phrase-utils";

describe('Epressions r√©guli√®res ‚àí Instruction: verbe + compl√©ment', () => {

  // Instruction : verbe + compl√©ment

  it('Phrase:  ¬´‚ÄØcontinuer l‚Äôaction‚ÄØ¬ª', () => {
    const result = ExprReg.xInstruction.exec("continuer l‚Äôaction");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("continuer"); // verbe
    expect(result[2]).toEqual("l‚Äôaction"); // compl√©ment
  });

  
  it('Phrase:  ¬´ annuler 1 tour ¬ª', () => {
    const result = ExprReg.xInstruction.exec("annuler 1 tour");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("annuler"); // verbe
    expect(result[2]).toEqual("1 tour"); // compl√©ment
  });

  it('Phrase:  ¬´‚ÄØchanger le joueur poss√®de la canne √† p√®che‚ÄØ¬ª', () => {
    const result = ExprReg.xInstruction.exec("changer le joueur poss√®de la canne √† p√®che");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("changer"); // verbe
    expect(result[2]).toEqual("le joueur poss√®de la canne √† p√®che"); // compl√©ment
  });

  it('Phrase:  ¬´‚ÄØdire ‚ÄØ¬ª', () => {
    const result = ExprReg.xInstruction.exec("dire ");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual('dire'); // verbe
    expect(result[2]).toBeUndefined(); // compl√©ment
  });

  it('Phrase:  ¬´‚ÄØdire "Bonjour !"‚ÄØ¬ª', () => {
    const result = ExprReg.xInstruction.exec('dire "Bonjour !"');
    expect(result).not.toBeNull();
    expect(result[1]).toEqual('dire'); // verbe
    expect(result[2]).toEqual('"Bonjour !"'); // compl√©ment
  });

  it('Phrase:  ¬´ attendre touche "Veuillez appuyer sur une touche" ¬ª', () => {
    const result = ExprReg.xInstruction.exec('attendre touche "Veuillez appuyer sur une touche"');
    expect(result).not.toBeNull();
    expect(result[1]).toEqual('attendre'); // verbe
    expect(result[2]).toEqual('touche "Veuillez appuyer sur une touche"'); // compl√©ment
  });

  it('Phrase: ¬´‚ÄØchanger le score augmente de 1‚ÄØ¬ª', () => {
    const result = ExprReg.xInstruction.exec("changer le score augmente de 1");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("changer"); // verbe
    expect(result[2]).toEqual("le score augmente de 1"); // compl√©ment
  });

  it('Phrase: ¬´‚ÄØchanger la liste des suspects contient "Alice"‚ÄØ¬ª', () => {
    const result = ExprReg.xInstruction.exec('changer la liste des suspects contient "Alice"');
    expect(result).not.toBeNull();
    expect(result[1]).toEqual('changer'); // verbe
    expect(result[2]).toEqual('la liste des suspects contient "Alice"'); // compl√©ment
  });


  it('Phrase: ¬´‚ÄØLancer un d√© de 4‚ÄØ¬ª', () => {
    const result = ExprReg.xInstruction.exec('Lancer un d√© de 4');
    expect(result).not.toBeNull();
    expect(result[1]).toEqual('Lancer'); // verbe
    expect(result[2]).toEqual('un d√© de 4'); // compl√©ment
  });

  it('Phrase:  ¬´‚ÄØla pomme est verte‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xInstruction.exec("la pomme est verte");
    expect(result).toBeNull();
  });

  it('Phrase:  ¬´‚ÄØchoisir parmis la liste‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xInstruction.exec("choisir parmis la liste");
    expect(result).toBeNull();
  });

});

describe('Epressions r√©guli√®res ‚àí Compl√©ment instruction: Phrase simple avec un verbe conjug√©', () => {

  // [le|la|les|...]\(1) (nom|ceci|cela)\(2) [attribut]\(3) [ne|n‚Äô|n'] ([se] verbe conjug√©)(4) [pas|plus]\(5) compl√©ment(6).

  it('Phrase:  ¬´‚ÄØla porte secr√®te n‚Äôest plus ferm√©e‚ÄØ¬ª', () => {
    const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("la porte secr√®te n‚Äôest plus ferm√©e");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("la "); // d√©terminant
    expect(result[2]).toEqual("porte"); // nom
    expect(result[3]).toEqual("secr√®te"); // attribut
    expect(result[4]).toEqual("est"); // verbe conjugu√©
    expect(result[5]).toEqual("plus"); // n√©gation
    expect(result[6]).toEqual("ferm√©e"); // compl√©ment
  });

  it('Phrase:  ¬´‚ÄØla canne √† p√®che rouge est ouverte‚ÄØ¬ª', () => {
    const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("la canne √† p√®che rouge est ouverte");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("la "); // d√©terminant
    expect(result[2]).toEqual("canne √† p√®che"); // nom
    expect(result[3]).toEqual("rouge"); // attribut
    expect(result[4]).toEqual("est"); // verbe conjugu√©
    expect(result[5]).toBeUndefined() // n√©gation
    expect(result[6]).toEqual("ouverte"); // compl√©ment
  });

  it('Phrase:  ¬´‚ÄØceci n‚Äôest plus vide‚ÄØ¬ª', () => {
    const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("ceci n‚Äôest plus vide");
    expect(result).not.toBeNull();
    expect(result[1]).toBeUndefined(); // d√©terminant
    expect(result[2]).toEqual("ceci"); // nom
    expect(result[3]).toBeUndefined(); // attribut
    expect(result[4]).toEqual("est"); // verbe conjugu√©
    expect(result[5]).toEqual("plus"); // n√©gation
    expect(result[6]).toEqual("vide"); // compl√©ment
  });

  it('Phrase:  ¬´‚ÄØle score augmente de 1‚ÄØ¬ª', () => {
    const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("le score augmente de 1");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual('le '); // d√©terminant
    expect(result[2]).toEqual("score"); // nom
    expect(result[3]).toBeUndefined(); // attribut
    expect(result[4]).toEqual("augmente"); // verbe conjugu√©
    expect(result[5]).toBeUndefined(); // n√©gation
    expect(result[6]).toEqual("de 1"); // compl√©ment
  });

  it('Phrase:  ¬´‚ÄØl‚Äôaction‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("l‚Äôaction");
    expect(result).toEqual(null);
  });

  it('Phrase: ¬´‚ÄØtouche "enfoncez enter" ¬ª (üí•)', () => {
    const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec('touche "enfoncez enter"');
    expect(result).toEqual(null);
  });

  it('Phrase: ¬´‚ÄØtouche "Veuillez appuyer sur une touche" ¬ª (üí•)', () => {
    const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec('touche "Veuillez appuyer sur une touche"');
    expect(result).toEqual(null);
  });

});

describe('Epressions r√©guli√®res ‚àí Compl√©ment instruction (1 ou 2 √©l√©ments)', () => {

  // => d√©terminant(1) nom(2) √©pith√®te(3) pr√©position(4) d√©terminant(5) nom(6) √©pith√®te(7).

  it('Compl√©ment:  ¬´‚ÄØl\'action‚ÄØ¬ª', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("l'action");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("l'"); // d√©terminant 1
    expect(result[2]).toEqual("action"); // nom 1
    expect(result[3]).toBeUndefined(); // √©pith√®te 1
    expect(result[4]).toBeUndefined(); // pr√©position
    expect(result[5]).toBeUndefined(); // d√©terminant 2
    expect(result[6]).toBeUndefined(); // nom 2
    expect(result[7]).toBeUndefined(); // √©pith√®te 2
  });

  it('Compl√©ment:  ¬´‚ÄØle tr√©sor vers le joueur‚ÄØ¬ª', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("le tr√©sor vers le joueur");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("le "); // d√©terminant 1
    expect(result[2]).toEqual("tr√©sor"); // nom 1
    expect(result[3]).toBeUndefined(); // √©pith√®te 1
    expect(result[4]).toEqual("vers"); // pr√©position
    expect(result[5]).toEqual("le "); // d√©terminant 2
    expect(result[6]).toEqual("joueur"); // nom 2
    expect(result[7]).toBeUndefined(); // √©pith√®te 2
  });


  it('Compl√©ment:  ¬´‚ÄØl‚Äôarc √† fl√®ches rouill√© avec la fl√®che rouge‚ÄØ¬ª', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("l‚Äôarc √† fl√®ches rouill√© avec la fl√®che rouge");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("l‚Äô"); // d√©terminant 1
    expect(result[2]).toEqual("arc √† fl√®ches"); // nom 1
    expect(result[3]).toEqual("rouill√©"); // √©pith√®te 1
    expect(result[4]).toEqual("avec"); // pr√©position
    expect(result[5]).toEqual("la "); // d√©terminant 2
    expect(result[6]).toEqual("fl√®che"); // nom 2
    expect(result[7]).toEqual("rouge"); // √©pith√®te 2
  });

  it('Compl√©ment:  ¬´‚ÄØtomate‚ÄØ¬ª', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("tomate");
    expect(result).not.toBeNull();
    expect(result[1]).toBeUndefined(); // d√©terminant 1
    expect(result[2]).toEqual("tomate"); // nom 1
    expect(result[3]).toBeUndefined(); // √©pith√®te 1
    expect(result[4]).toBeUndefined(); // pr√©position
    expect(result[5]).toBeUndefined(); // d√©terminant 2
    expect(result[6]).toBeUndefined(); // nom 2
    expect(result[7]).toBeUndefined(); // √©pith√®te 2
  });

  it('Compl√©ment:  ¬´‚ÄØun d√© de 4‚ÄØ¬ª', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("un d√© de 4");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("un "); // d√©terminant 1
    expect(result[2]).toEqual("d√©"); // nom 1
    expect(result[3]).toBeUndefined(); // √©pith√®te 1
    expect(result[4]).toEqual("de"); // pr√©position
    expect(result[5]).toBeUndefined(); // d√©terminant 2
    expect(result[6]).toEqual("4"); // nom 2
    expect(result[7]).toBeUndefined(); // √©pith√®te 2
  });

  it('Compl√©ment:  ¬´ une action ¬ª', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("une action");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("une "); // d√©terminant 1
    expect(result[2]).toEqual("action"); // nom 1
    expect(result[3]).toBeUndefined(); // √©pith√®te 1
  });

  it('Compl√©ment:  ¬´ 1 tour ¬ª', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("1 tour");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("1 "); // d√©terminant 1
    expect(result[2]).toEqual("tour"); // nom 1
    expect(result[3]).toBeUndefined(); // √©pith√®te 1
  });
  
  it('Compl√©ment:  ¬´‚ÄØmanger le biscuit‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("manger le biscuit");
    expect(result).toBeNull();
  });

  it('Compl√©ment: ¬´‚ÄØtouche "enfoncez enter" ¬ª (üí•)', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec('touche "enfoncez enter"');
    expect(result).toEqual(null);
  });

  it('Compl√©ment: ¬´‚ÄØtouche "Veuillez appuyer sur une touche" ¬ª (üí•)', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec('touche "Veuillez appuyer sur une touche"');
    expect(result).toEqual(null);
  });

});

describe('PhrasesUtils ‚àí decomposerInstruction', () => {

  // TYPE UTILISATEUR > NOUVEAU TYPE
  // - un/une(1) nouveauType(2) est un/une typeParent(3) {attributs}(4)

  it('Instruction‚ÄØ:  ¬´‚ÄØcontinuer l‚Äôaction‚ÄØ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction("continuer l‚Äôaction");
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual("continuer");
    expect(result.sujet.determinant).toEqual("l‚Äô");
    expect(result.sujet.nom).toEqual("action");
    expect(result.sujet).toEqual(new GroupeNominal("l‚Äô", "action"));
    expect(result.complement1).toBeNull();
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });


  it('Instruction‚ÄØ:  ¬´‚ÄØchanger le joueur poss√®de la canne √† p√®che‚ÄØ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction("changer le joueur poss√®de la canne √† p√®che");
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual("changer");
    expect(result.sujet).toEqual(new GroupeNominal("le ", "joueur"));
    expect(result.verbe).toEqual("poss√®de");
    expect(result.complement1).toBe("la canne √† p√®che");
    expect(result.sujetComplement1).toEqual(new GroupeNominal("la ", "canne √† p√®che"));
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´‚ÄØchanger la liste des suspects contient "Alice"‚ÄØ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('changer la liste des suspects contient "Alice"');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual("changer");
    expect(result.sujet).toEqual(new GroupeNominal('la ', 'liste des suspects'));
    expect(result.verbe).toEqual('contient');
    expect(result.complement1).toBe('"Alice"');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´‚ÄØafficher l‚Äôimage donjon.png‚ÄØ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('afficher l‚Äôimage donjon.png');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('afficher');
    expect(result.sujet).toEqual(new GroupeNominal('l‚Äô', 'image'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('donjon.png');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´‚ÄØafficher image mon_image.gif‚ÄØ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('afficher image mon_image.gif');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('afficher');
    expect(result.sujet).toEqual(new GroupeNominal(undefined, 'image'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('mon_image.gif');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });


  it('Instruction‚ÄØ:  ¬´‚ÄØjouer le son epee‚ÄØ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('jouer le son epee');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('jouer');
    expect(result.sujet).toEqual(new GroupeNominal('le ', 'son'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('epee');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´‚ÄØcharger le th√®me n√©on.css‚ÄØ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('charger le th√®me neon.css');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('charger');
    expect(result.sujet).toEqual(new GroupeNominal('le ', 'th√®me'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('neon.css');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´‚ÄØjouer le son coup_d_epee.flac‚ÄØ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('jouer le son coup_d_epee.flac');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('jouer');
    expect(result.sujet).toEqual(new GroupeNominal('le ', 'son'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('coup_d_epee.flac');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´‚ÄØjouer le son coup_d_epee.wav 3 fois‚ÄØ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('jouer le son coup_d_epee.wav 3 fois');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual("jouer");
    expect(result.sujet).toEqual(new GroupeNominal('le ', 'son'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('coup_d_epee.wav');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toEqual("3 fois");
    expect(result.sujetComplement2).toEqual(new GroupeNominal("3 ", "fois"));
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´‚ÄØjouer la musique musique_classique.ogg‚ÄØ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('jouer la musique musique_classique.ogg');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual("jouer");
    expect(result.sujet).toEqual(new GroupeNominal('la ', 'musique'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('musique_classique.ogg');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´‚ÄØjouer la musique musique_classique.mp3 en boucle‚ÄØ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('jouer la musique musique_classique.mp3 en boucle');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual("jouer");
    expect(result.sujet).toEqual(new GroupeNominal('la ', 'musique'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('musique_classique.mp3');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toEqual("en boucle");
    expect(result.sujetComplement2).toEqual(new GroupeNominal(undefined, "en boucle"));
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  
  it('Instruction‚ÄØ:  ¬´ attendre touche "Il faut appuyer √† pr√©sent!" ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('attendre touche "Il faut appuyer √† pr√©sent!"');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('attendre');
    expect(result.sujet.toString()).toEqual('une touche');
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('"Il faut appuyer √† pr√©sent!"');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´ attendre touche ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('attendre touche');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('attendre');
    expect(result.sujet.toString()).toEqual('une touche');
    expect(result.verbe).toBeNull();
    expect(result.complement1).toBeUndefined();
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´ attendre 1 touche ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('attendre 1 touche');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('attendre');
    expect(result.sujet.toString()).toEqual('une touche');
    expect(result.verbe).toBeNull();
    expect(result.complement1).toBeUndefined();
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´ attendre touche "Veuillez entrer n‚Äôimporte quelle touche." ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('attendre touche "Veuillez entrer n‚Äôimporte quelle touche."');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('attendre');
    expect(result.sujet.toString()).toEqual('une touche');
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('"Veuillez entrer n‚Äôimporte quelle touche."');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´ attendre 0.5 seconde ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('attendre 0.5 seconde');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('attendre');
    expect(result.sujet.determinant).toEqual('0.5');
    expect(result.sujet.nom).toEqual('seconde');
    expect(result.verbe).toBeNull();
    expect(result.complement1).toBeUndefined();
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
  });

  
  it('Instruction‚ÄØ:  ¬´ attendre 0,3 secondes ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('attendre 0,3 secondes');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('attendre');
    expect(result.sujet.determinant).toEqual('0,3');
    expect(result.sujet.nom).toEqual('secondes');
    expect(result.verbe).toBeNull();
    expect(result.complement1).toBeUndefined();
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´ attendre 1 seconde ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('attendre 1 seconde');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('attendre');
    expect(result.sujet.determinant).toEqual('1');
    expect(result.sujet.nom).toEqual('seconde');
    expect(result.verbe).toBeNull();
    expect(result.complement1).toBeUndefined();
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´ attendre 5 secondes ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('attendre 5 secondes');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('attendre');
    expect(result.sujet.determinant).toEqual('5');
    expect(result.sujet.nom).toEqual('secondes');
    expect(result.verbe).toBeNull();
    expect(result.complement1).toBeUndefined();
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
  });

  it('Instruction‚ÄØ:  ¬´ attendre -1 seconde ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('attendre -1 seconde');
    expect(result).toBeNull();
  });

  it('Instruction‚ÄØ:  ¬´ attendre 0 seconde ¬ª', () => {
    const result = PhraseUtils.decomposerInstruction('attendre 0 seconde');
    expect(result).toBeNull();
  });


});
