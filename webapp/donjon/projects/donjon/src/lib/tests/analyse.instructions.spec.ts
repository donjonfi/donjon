import { ExprReg } from "../utils/compilation/expr-reg";
import { GroupeNominal } from "../models/commun/groupe-nominal";
import { PhraseUtils } from "../utils/commun/phrase-utils";

describe('Epressions rÃ©guliÃ¨res âˆ’ Instruction: verbe + complÃ©ment', () => {

  // Instruction : verbe + complÃ©ment

  it('Phrase:  Â«â€¯continuer lâ€™actionâ€¯Â»', () => {
    const result = ExprReg.xInstruction.exec("continuer lâ€™action");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("continuer"); // verbe
    expect(result[2]).toEqual("lâ€™action"); // complÃ©ment
  });

  it('Phrase:  Â«â€¯changer le joueur possÃ¨de la canne Ã  pÃ¨cheâ€¯Â»', () => {
    const result = ExprReg.xInstruction.exec("changer le joueur possÃ¨de la canne Ã  pÃ¨che");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("changer"); // verbe
    expect(result[2]).toEqual("le joueur possÃ¨de la canne Ã  pÃ¨che"); // complÃ©ment
  });

  it('Phrase:  Â«â€¯dire â€¯Â»', () => {
    const result = ExprReg.xInstruction.exec("dire ");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual('dire'); // verbe
    expect(result[2]).toBeUndefined(); // complÃ©ment
  });

  it('Phrase:  Â«â€¯dire "Bonjour !"â€¯Â»', () => {
    const result = ExprReg.xInstruction.exec("dire \"Bonjour !\"");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual('dire'); // verbe
    expect(result[2]).toEqual("\"Bonjour !\""); // complÃ©ment
  });

  it('Phrase: Â«â€¯changer le score augmente de 1â€¯Â»', () => {
    const result = ExprReg.xInstruction.exec("changer le score augmente de 1");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("changer"); // verbe
    expect(result[2]).toEqual("le score augmente de 1"); // complÃ©ment
  });

  it('Phrase: Â«â€¯changer la liste des suspects contient "Alice"â€¯Â»', () => {
    const result = ExprReg.xInstruction.exec('changer la liste des suspects contient "Alice"');
    expect(result).not.toBeNull();
    expect(result[1]).toEqual('changer'); // verbe
    expect(result[2]).toEqual('la liste des suspects contient "Alice"'); // complÃ©ment
  });


  it('Phrase: Â«â€¯Lancer un dÃ© de 4â€¯Â»', () => {
    const result = ExprReg.xInstruction.exec('Lancer un dÃ© de 4');
    expect(result).not.toBeNull();
    expect(result[1]).toEqual('Lancer'); // verbe
    expect(result[2]).toEqual('un dÃ© de 4'); // complÃ©ment
  });


  it('Phrase:  Â«â€¯la pomme est verteâ€¯Â» (ðŸ’¥)', () => {
    const result = ExprReg.xInstruction.exec("la pomme est verte");
    expect(result).toBeNull();
  });

});

describe('Epressions rÃ©guliÃ¨res âˆ’ ComplÃ©ment instruction: Phrase simple avec un verbe conjugÃ©', () => {

  // [le|la|les|...]\(1) (nom|ceci|cela)\(2) [attribut]\(3) [ne|nâ€™|n'] ([se] verbe conjugÃ©)(4) [pas|plus]\(5) complÃ©ment(6).

  it('Phrase:  Â«â€¯la porte secrÃ¨te nâ€™est plus fermÃ©eâ€¯Â»', () => {
    const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("la porte secrÃ¨te nâ€™est plus fermÃ©e");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("la "); // dÃ©terminant
    expect(result[2]).toEqual("porte"); // nom
    expect(result[3]).toEqual("secrÃ¨te"); // attribut
    expect(result[4]).toEqual("est"); // verbe conjuguÃ©
    expect(result[5]).toEqual("plus"); // nÃ©gation
    expect(result[6]).toEqual("fermÃ©e"); // complÃ©ment
  });

  it('Phrase:  Â«â€¯la canne Ã  pÃ¨che rouge est ouverteâ€¯Â»', () => {
    const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("la canne Ã  pÃ¨che rouge est ouverte");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("la "); // dÃ©terminant
    expect(result[2]).toEqual("canne Ã  pÃ¨che"); // nom
    expect(result[3]).toEqual("rouge"); // attribut
    expect(result[4]).toEqual("est"); // verbe conjuguÃ©
    expect(result[5]).toBeUndefined() // nÃ©gation
    expect(result[6]).toEqual("ouverte"); // complÃ©ment
  });

  it('Phrase:  Â«â€¯ceci nâ€™est plus videâ€¯Â»', () => {
    const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("ceci nâ€™est plus vide");
    expect(result).not.toBeNull();
    expect(result[1]).toBeUndefined(); // dÃ©terminant
    expect(result[2]).toEqual("ceci"); // nom
    expect(result[3]).toBeUndefined(); // attribut
    expect(result[4]).toEqual("est"); // verbe conjuguÃ©
    expect(result[5]).toEqual("plus"); // nÃ©gation
    expect(result[6]).toEqual("vide"); // complÃ©ment
  });

  it('Phrase:  Â«â€¯le score augmente de 1â€¯Â»', () => {
    const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("le score augmente de 1");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual('le '); // dÃ©terminant
    expect(result[2]).toEqual("score"); // nom
    expect(result[3]).toBeUndefined(); // attribut
    expect(result[4]).toEqual("augmente"); // verbe conjuguÃ©
    expect(result[5]).toBeUndefined(); // nÃ©gation
    expect(result[6]).toEqual("de 1"); // complÃ©ment
  });

  it('Phrase:  Â«â€¯lâ€™actionâ€¯Â» (ðŸ’¥)', () => {
    const result = ExprReg.xSuiteInstructionPhraseAvecVerbeConjugue.exec("lâ€™action");
    expect(result).toEqual(null);
  });

});

describe('Epressions rÃ©guliÃ¨res âˆ’ ComplÃ©ment instruction (1 ou 2 Ã©lÃ©ments)', () => {

  // => dÃ©terminant(1) nom(2) Ã©pithÃ¨te(3) prÃ©position(4) dÃ©terminant(5) nom(6) Ã©pithÃ¨te(7).

  it('ComplÃ©ment:  Â«â€¯l\'actionâ€¯Â»', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("l'action");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("l'"); // dÃ©terminant 1
    expect(result[2]).toEqual("action"); // nom 1
    expect(result[3]).toBeUndefined(); // Ã©pithÃ¨te 1
    expect(result[4]).toBeUndefined(); // prÃ©position
    expect(result[5]).toBeUndefined(); // dÃ©terminant 2
    expect(result[6]).toBeUndefined(); // nom 2
    expect(result[7]).toBeUndefined(); // Ã©pithÃ¨te 2
  });

  it('ComplÃ©ment:  Â«â€¯le trÃ©sor vers le joueurâ€¯Â»', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("le trÃ©sor vers le joueur");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("le "); // dÃ©terminant 1
    expect(result[2]).toEqual("trÃ©sor"); // nom 1
    expect(result[3]).toBeUndefined(); // Ã©pithÃ¨te 1
    expect(result[4]).toEqual("vers"); // prÃ©position
    expect(result[5]).toEqual("le "); // dÃ©terminant 2
    expect(result[6]).toEqual("joueur"); // nom 2
    expect(result[7]).toBeUndefined(); // Ã©pithÃ¨te 2
  });


  it('ComplÃ©ment:  Â«â€¯lâ€™arc Ã  flÃ¨ches rouillÃ© avec la flÃ¨che rougeâ€¯Â»', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("lâ€™arc Ã  flÃ¨ches rouillÃ© avec la flÃ¨che rouge");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("lâ€™"); // dÃ©terminant 1
    expect(result[2]).toEqual("arc Ã  flÃ¨ches"); // nom 1
    expect(result[3]).toEqual("rouillÃ©"); // Ã©pithÃ¨te 1
    expect(result[4]).toEqual("avec"); // prÃ©position
    expect(result[5]).toEqual("la "); // dÃ©terminant 2
    expect(result[6]).toEqual("flÃ¨che"); // nom 2
    expect(result[7]).toEqual("rouge"); // Ã©pithÃ¨te 2
  });

  it('ComplÃ©ment:  Â«â€¯tomateâ€¯Â»', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("tomate");
    expect(result).not.toBeNull();
    expect(result[1]).toBeUndefined(); // dÃ©terminant 1
    expect(result[2]).toEqual("tomate"); // nom 1
    expect(result[3]).toBeUndefined(); // Ã©pithÃ¨te 1
    expect(result[4]).toBeUndefined(); // prÃ©position
    expect(result[5]).toBeUndefined(); // dÃ©terminant 2
    expect(result[6]).toBeUndefined(); // nom 2
    expect(result[7]).toBeUndefined(); // Ã©pithÃ¨te 2
  });

  it('ComplÃ©ment:  Â«â€¯un dÃ© de 4â€¯Â»', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("un dÃ© de 4");
    expect(result).not.toBeNull();
    expect(result[1]).toEqual("un "); // dÃ©terminant 1
    expect(result[2]).toEqual("dÃ©"); // nom 1
    expect(result[3]).toBeUndefined(); // Ã©pithÃ¨te 1
    expect(result[4]).toEqual("de"); // prÃ©position
    expect(result[5]).toBeUndefined(); // dÃ©terminant 2
    expect(result[6]).toEqual("4"); // nom 2
    expect(result[7]).toBeUndefined(); // Ã©pithÃ¨te 2
  });


  it('ComplÃ©ment:  Â«â€¯manger le biscuitâ€¯Â» (ðŸ’¥)', () => {
    const result = ExprReg.xComplementInstruction1ou2elements.exec("manger le biscuit");
    expect(result).toBeNull();
  });

});

describe('PhrasesUtils âˆ’ decomposerInstruction', () => {

  // TYPE UTILISATEUR > NOUVEAU TYPE
  // - un/une(1) nouveauType(2) est un/une typeParent(3) {attributs}(4)

  it('Instructionâ€¯:  Â«â€¯continuer lâ€™actionâ€¯Â»', () => {
    const result = PhraseUtils.decomposerInstruction("continuer lâ€™action");
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual("continuer");
    expect(result.sujet.determinant).toEqual("lâ€™");
    expect(result.sujet.nom).toEqual("action");
    expect(result.sujet).toEqual(new GroupeNominal("lâ€™", "action"));
    expect(result.complement1).toBeNull();
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });


  it('Instructionâ€¯:  Â«â€¯changer le joueur possÃ¨de la canne Ã  pÃ¨cheâ€¯Â»', () => {
    const result = PhraseUtils.decomposerInstruction("changer le joueur possÃ¨de la canne Ã  pÃ¨che");
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual("changer");
    expect(result.sujet).toEqual(new GroupeNominal("le ", "joueur"));
    expect(result.verbe).toEqual("possÃ¨de");
    expect(result.complement1).toBe("la canne Ã  pÃ¨che");
    expect(result.sujetComplement1).toEqual(new GroupeNominal("la ", "canne Ã  pÃ¨che"));
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instructionâ€¯:  Â«â€¯changer la liste des suspects contient "Alice"â€¯Â»', () => {
    const result = PhraseUtils.decomposerInstruction('changer la liste des suspects contient "Alice"');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual("changer");
    expect(result.sujet).toEqual(new GroupeNominal('la ', 'liste des suspects'));
    expect(result.verbe).toEqual('contient');
    expect(result.complement1).toBe('"Alice"');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instructionâ€¯:  Â«â€¯afficher lâ€™image donjon.pngâ€¯Â»', () => {
    const result = PhraseUtils.decomposerInstruction('afficher lâ€™image donjon.png');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('afficher');
    expect(result.sujet).toEqual(new GroupeNominal('lâ€™', 'image'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('donjon.png');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instructionâ€¯:  Â«â€¯afficher image mon_image.gifâ€¯Â»', () => {
    const result = PhraseUtils.decomposerInstruction('afficher image mon_image.gif');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('afficher');
    expect(result.sujet).toEqual(new GroupeNominal(null, 'image'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('mon_image.gif');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });
  

  it('Instructionâ€¯:  Â«â€¯jouer le son epeeâ€¯Â»', () => {
    const result = PhraseUtils.decomposerInstruction('jouer le son epee');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('jouer');
    expect(result.sujet).toEqual(new GroupeNominal('le ', 'son'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('epee');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instructionâ€¯:  Â«â€¯jouer le son coup_d_epee.flacâ€¯Â»', () => {
    const result = PhraseUtils.decomposerInstruction('jouer le son coup_d_epee.flac');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual('jouer');
    expect(result.sujet).toEqual(new GroupeNominal('le ', 'son'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('coup_d_epee.flac');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instructionâ€¯:  Â«â€¯jouer le son coup_d_epee.wav 3 foisâ€¯Â»', () => {
    const result = PhraseUtils.decomposerInstruction('jouer le son coup_d_epee.wav 3 fois');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual("jouer");
    expect(result.sujet).toEqual(new GroupeNominal('le ', 'son'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('coup_d_epee.wav');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toEqual("3 fois");
    expect(result.sujetComplement2).toEqual(new GroupeNominal("3 ", "fois"));
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instructionâ€¯:  Â«â€¯jouer la musique musique_classique.oggâ€¯Â»', () => {
    const result = PhraseUtils.decomposerInstruction('jouer la musique musique_classique.ogg');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual("jouer");
    expect(result.sujet).toEqual(new GroupeNominal('la ', 'musique'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('musique_classique.ogg');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toBeUndefined();
    expect(result.sujetComplement2).toBeUndefined();
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

  it('Instructionâ€¯:  Â«â€¯jouer la musique musique_classique.mp3 en boucleâ€¯Â»', () => {
    const result = PhraseUtils.decomposerInstruction('jouer la musique musique_classique.mp3 en boucle');
    expect(result).not.toBeNull();
    expect(result.infinitif).toEqual("jouer");
    expect(result.sujet).toEqual(new GroupeNominal('la ', 'musique'));
    expect(result.verbe).toBeNull();
    expect(result.complement1).toEqual('musique_classique.mp3');
    expect(result.sujetComplement1).toBeUndefined();
    expect(result.complement2).toEqual("en boucle");
    expect(result.sujetComplement2).toEqual(new GroupeNominal(undefined, "en boucle"));
    expect(result.sujetComplement3).toBeUndefined();
    expect(result.sujetComplement4).toBeUndefined();
  });

});
