import { Analyseur, Compilateur, ContexteAnalyse, EClasseRacine, ElementGenerique } from "../../public-api";

import { ExprReg } from "../utils/compilation/expr-reg";
import { ResultatAnalysePhrase } from "../models/compilateur/resultat-analyse-phrase";

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
//    [1/2] EXPRESSIONS R√âGULI√àRES
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

describe('Epressions r√©guli√®res ‚àí √âtats (attributs) d‚Äôun √©l√©ment jeu', () => {

  it('Attribut ele‚ÄØ: ¬´‚ÄØLe bateau est vieux et trou√©‚ÄØ¬ª ', () => {
    const result = ExprReg.xElementSimpleAttribut.exec('Le bateau est vieux et trou√©');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual('Le '); // d√©terminant
    expect(result[2]).toEqual('bateau'); // nom
    expect(result[3]).toBeUndefined(); // √©pith√®te
    expect(result[4]).toBeUndefined; // (f√©minin, autre forme)
    expect(result[5]).toEqual('vieux et trou√©'); // attributs
  });

  it('Attribut ele‚ÄØ: ¬´‚ÄØJulien est grand ¬ª ', () => {
    const result = ExprReg.xElementSimpleAttribut.exec('Julien est grand');
    expect(result).not.toBeNull();
    expect(result[1]).toBeUndefined(); // d√©terminant
    expect(result[2]).toEqual('Julien'); // nom
    expect(result[3]).toBeUndefined(); // √©pith√®te
    expect(result[4]).toBeUndefined; // (f√©minin, autre forme)
    expect(result[5]).toEqual('grand'); // attributs
  });

  it('Attribut ele‚ÄØ: ¬´‚ÄØL‚Äôaliance du lac rouge (f) est petite, fragile, vieille et dor√©e ¬ª ', () => {
    const result = ExprReg.xElementSimpleAttribut.exec('L‚Äôaliance du lac rouge (f, aliances du lac) est petite, fragile, vieille et dor√©e');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual('L‚Äô'); // d√©terminant
    expect(result[2]).toEqual('aliance du lac'); // nom
    expect(result[3]).toEqual('rouge'); // √©pith√®te
    expect(result[4]).toEqual('(f, aliances du lac)'); // (f√©minin, autre forme)
    expect(result[5]).toEqual('petite, fragile, vieille et dor√©e'); // attributs
  });

  it('Attribut ele‚ÄØ: ¬´‚ÄØLes pommes de terre pourries (f, pomme de terre) sont mauves, odorantes et humides ¬ª ', () => {
    const result = ExprReg.xElementSimpleAttribut.exec('Les pommes de terre pourries (f, pomme de terre) sont mauves, odorantes et humides');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual('Les '); // d√©terminant
    expect(result[2]).toEqual('pommes de terre'); // nom
    expect(result[3]).toEqual('pourries'); // √©pith√®te
    expect(result[4]).toEqual('(f, pomme de terre)'); // (f√©minin, autre forme)
    expect(result[5]).toEqual('mauves, odorantes et humides'); // attributs
  });

  it('Attribut √©l√© : ¬´ La baguette est un objet maudit, rouge et magique ici ¬ª (üí•)', () => {
    const result = ExprReg.xElementSimpleAttribut.exec('La baguette est un objet maudit, rouge et magique ici"');
    expect(result).toEqual(null);
  });
  
  it('Attribut √©l√© : ¬´ La table est un support grand et opaque dans la salle ¬ª (üí•)', () => {
    const result = ExprReg.xElementSimpleAttribut.exec('La table est un support grand et opaque dans la salle"');
    expect(result).toEqual(null);
  });

  it('Attribut √©l√© : ¬´‚ÄØSa r√©action est "Bonjour !"‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xElementSimpleAttribut.exec('Sa r√©action est "Bonjour !"');
    expect(result).toEqual(null);
  });

});

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
//    [2/2] ANALYSE
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

describe('Epressions r√©guli√®res ‚àí √âtats (attributs) d‚Äôun √©l√©ment jeu', () => {

  it('Attribut ele‚ÄØ: ¬´‚ÄØLe bateau est vieux et trou√©‚ÄØ¬ª ', () => {

    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "Le bateau est vieux et trou√©. \n" +
      ""
    );
    expect(phrases).toHaveSize(1); // nombre de phrases
    expect(phrases[0].phrase).toHaveSize(1); // nombre de morceaux
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // pas d‚Äôerreur
    // tester l‚Äô√©l√©ment g√©n√©r√© et ses attributs
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique);
    expect(ctxAnalyse.dernierElementGenerique.classeIntitule).toEqual(EClasseRacine.objet);
    expect(ctxAnalyse.dernierElementGenerique.attributs).toHaveSize(2);
    expect(ctxAnalyse.dernierElementGenerique.attributs[0]).toEqual("vieux");
    expect(ctxAnalyse.dernierElementGenerique.attributs[1]).toEqual("trou√©");
  });

  it('Analyse‚ÄØ: ¬´‚ÄØLe bateau est vieux, et trou√©‚ÄØ¬ª ', () => {

    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "Le bateau est vieux, et trou√©. \n" +
      ""
    );
    expect(phrases).toHaveSize(1); // nombre de phrases
    expect(phrases[0].phrase).toHaveSize(1); // nombre de morceaux
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // pas d‚Äôerreur
    // tester l‚Äô√©l√©ment g√©n√©r√© et ses attributs
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique);
    expect(ctxAnalyse.dernierElementGenerique.classeIntitule).toEqual(EClasseRacine.objet);
    expect(ctxAnalyse.dernierElementGenerique.attributs).toHaveSize(2);
    expect(ctxAnalyse.dernierElementGenerique.attributs[0]).toEqual("vieux");
    expect(ctxAnalyse.dernierElementGenerique.attributs[1]).toEqual("trou√©");
  });

  it('Analyse‚ÄØ: ¬´‚ÄØLe bateau est vieux, trou√©‚ÄØ¬ª ', () => {

    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "Le bateau est vieux, trou√©. \n" +
      ""
    );
    expect(phrases).toHaveSize(1); // nombre de phrases
    expect(phrases[0].phrase).toHaveSize(1); // nombre de morceaux
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // pas d‚Äôerreur
    // tester l‚Äô√©l√©ment g√©n√©r√© et ses attributs
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique);
    expect(ctxAnalyse.dernierElementGenerique.classeIntitule).toEqual(EClasseRacine.objet);
    expect(ctxAnalyse.dernierElementGenerique.nom).toEqual("bateau");
    expect(ctxAnalyse.dernierElementGenerique.attributs).toHaveSize(2);
    expect(ctxAnalyse.dernierElementGenerique.attributs[0]).toEqual("vieux");
    expect(ctxAnalyse.dernierElementGenerique.attributs[1]).toEqual("trou√©");
  });

  it('Analyse‚ÄØ: ¬´ Julien est grand ¬ª ', () => {

    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "Julien est grand. \n" +
      ""
    );
    expect(phrases).toHaveSize(1); // nombre de phrases
    expect(phrases[0].phrase).toHaveSize(1); // nombre de morceaux
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // pas d‚Äôerreur
    // tester l‚Äô√©l√©ment g√©n√©r√© et ses attributs
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique);
    expect(ctxAnalyse.dernierElementGenerique.classeIntitule).toEqual(EClasseRacine.objet);
    expect(ctxAnalyse.dernierElementGenerique.nom).toEqual("Julien");
    expect(ctxAnalyse.dernierElementGenerique.attributs).toHaveSize(1);
    expect(ctxAnalyse.dernierElementGenerique.attributs[0]).toEqual("grand");
  });
  
  it('Analyse‚ÄØ: ¬´ Le bateau est vieux et trou√© ¬ª ', () => {

    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "Le bateau est vieux, et trou√©. \n" +
      ""
    );
    expect(phrases).toHaveSize(1); // nombre de phrases
    expect(phrases[0].phrase).toHaveSize(1); // nombre de morceaux
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // pas d‚Äôerreur
    // tester l‚Äô√©l√©ment g√©n√©r√© et ses attributs
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique);
    expect(ctxAnalyse.dernierElementGenerique.classeIntitule).toEqual(EClasseRacine.objet);
    expect(ctxAnalyse.dernierElementGenerique.attributs).toHaveSize(2);
    expect(ctxAnalyse.dernierElementGenerique.attributs[0]).toEqual("vieux");
    expect(ctxAnalyse.dernierElementGenerique.attributs[1]).toEqual("trou√©");
  });

    
  it('Analyse‚ÄØ: ¬´ Le bateau est vieux,et trou√© ¬ª ', () => {

    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "Le bateau est vieux, et trou√©. \n" +
      ""
    );
    expect(phrases).toHaveSize(1); // nombre de phrases
    expect(phrases[0].phrase).toHaveSize(1); // nombre de morceaux
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // pas d‚Äôerreur
    // tester l‚Äô√©l√©ment g√©n√©r√© et ses attributs
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique);
    expect(ctxAnalyse.dernierElementGenerique.classeIntitule).toEqual(EClasseRacine.objet);
    expect(ctxAnalyse.dernierElementGenerique.attributs).toHaveSize(2);
    expect(ctxAnalyse.dernierElementGenerique.attributs[0]).toEqual("vieux");
    expect(ctxAnalyse.dernierElementGenerique.attributs[1]).toEqual("trou√©");
  });

  it('Analyse‚ÄØ: ¬´ L‚Äôaliance du lac rouge (f) est petite, fragile, vieille et dor√©e. ¬ª ', () => {

    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "L‚Äôaliance du lac rouge (f) est petite, fragile, vieille et dor√©e. \n" +
      ""
    );
    expect(phrases).toHaveSize(1); // nombre de phrases
    expect(phrases[0].phrase).toHaveSize(1); // nombre de morceaux
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // pas d‚Äôerreur
    // tester l‚Äô√©l√©ment g√©n√©r√© et ses attributs
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique);
    expect(ctxAnalyse.dernierElementGenerique.classeIntitule).toEqual(EClasseRacine.objet);
    expect(ctxAnalyse.dernierElementGenerique.nom).toEqual("aliance du lac");
    expect(ctxAnalyse.dernierElementGenerique.epithete).toEqual("rouge");
    expect(ctxAnalyse.dernierElementGenerique.attributs[0]).toEqual("petite");
    expect(ctxAnalyse.dernierElementGenerique.attributs[1]).toEqual("fragile");
    expect(ctxAnalyse.dernierElementGenerique.attributs[2]).toEqual("vieille");
    expect(ctxAnalyse.dernierElementGenerique.attributs[3]).toEqual("dor√©e");
  });

  
  it('Analyse‚ÄØ: ¬´ L‚Äôaliance du lac rouge (f) est petite, fragile, vieille, et dor√©e. ¬ª ', () => {

    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "L‚Äôaliance du lac rouge (f) est petite, fragile, vieille, et dor√©e. \n" +
      ""
    );
    expect(phrases).toHaveSize(1); // nombre de phrases
    expect(phrases[0].phrase).toHaveSize(1); // nombre de morceaux
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // pas d‚Äôerreur
    // tester l‚Äô√©l√©ment g√©n√©r√© et ses attributs
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique);
    expect(ctxAnalyse.dernierElementGenerique.classeIntitule).toEqual(EClasseRacine.objet);
    expect(ctxAnalyse.dernierElementGenerique.nom).toEqual("aliance du lac");
    expect(ctxAnalyse.dernierElementGenerique.epithete).toEqual("rouge");
    expect(ctxAnalyse.dernierElementGenerique.attributs[0]).toEqual("petite");
    expect(ctxAnalyse.dernierElementGenerique.attributs[1]).toEqual("fragile");
    expect(ctxAnalyse.dernierElementGenerique.attributs[2]).toEqual("vieille");
    expect(ctxAnalyse.dernierElementGenerique.attributs[3]).toEqual("dor√©e");
  });

});
