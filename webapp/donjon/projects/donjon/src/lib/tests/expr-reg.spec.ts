import { ExprReg } from "../utils/compilation/expr-reg";

describe('Epressions r√©guli√®res ‚àí D√©finition des √©l√©ments du monde', () => {

  // VERBE √Ä L‚ÄôINFINITIF
  // - verbe(1)

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØmarcher‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("marcher");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("marcher"); // infinitif
  });

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØpartir‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("partir");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("partir"); // infinitif
  });

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØboire‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("boire");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("boire"); // infinitif
  });

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØmarcher‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("marcher");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("marcher"); // infinitif
  });

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØse brosser‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("se brosser");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("se brosser"); // infinitif
  });

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØs‚Äô√©gosiller‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("s‚Äô√©gosiller");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("s‚Äô√©gosiller"); // infinitif
  })

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØs\'√©veiller‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("s'√©veiller");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("s'√©veiller"); // infinitif
  });

  it('Verbe infinitif‚ÄØ: ¬´‚ÄØoiseau‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xVerbeInfinitif.exec("oiseau");
    expect(result).toEqual(null);
  });

  it('Verbe infinitif‚ÄØ: ¬´‚ÄØun boucher‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xVerbeInfinitif.exec("un boucher");
    expect(result).toEqual(null);
  });

  // GROUPE NOMINAL
  // - D√©terminant(1), Nom(2), √âpith√®te(3)

  it('Groupe Nominal‚ÄØ:  ¬´‚ÄØLa pomme de terre pourrie ¬ª', () => {
    const result = ExprReg.xGroupeNominal.exec("La pomme de terre pourrie");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("La "); // d√©terminant
    expect(result[2]).toEqual("pomme de terre"); // nom
    expect(result[3]).toEqual("pourrie"); // attribut
  });

  it('Groupe Nominal‚ÄØ:  ¬´‚ÄØla canne √† p√®che ¬ª', () => {
    const result = ExprReg.xGroupeNominal.exec("la canne √† p√®che");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("la "); // d√©terminant
    expect(result[2]).toEqual("canne √† p√®che"); // nom
    expect(result[3]).toBeUndefined(); // attribut
  });

  it('Groupe Nominal‚ÄØ:  ¬´‚ÄØle chapeau gris ¬ª', () => {
    const result = ExprReg.xGroupeNominal.exec("le chapeau gris");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("le "); // d√©terminant
    expect(result[2]).toEqual("chapeau"); // nom
    expect(result[3]).toEqual("gris"); // attribut
  });


  it('Groupe Nominal‚ÄØ:  ¬´‚ÄØchapeau ¬ª', () => {
    const result = ExprReg.xGroupeNominal.exec("chapeau");
    expect(result).not.toEqual(null);
    expect(result[1]).toBeUndefined(); // d√©terminant
    expect(result[2]).toEqual("chapeau"); // nom
    expect(result[3]).toBeUndefined(); // attribut
  });

  it('Groupe Nominal‚ÄØ:  ¬´‚ÄØle chapeau ¬ª', () => {
    const result = ExprReg.xGroupeNominal.exec("le chapeau");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("le "); // d√©terminant
    expect(result[2]).toEqual("chapeau"); // nom
    expect(result[3]).toBeUndefined(); // attribut
  });

  it('Groupe Nominal‚ÄØ:  ¬´‚ÄØl‚Äôarracheur de dents dor√©es ¬ª', () => {
    const result = ExprReg.xGroupeNominal.exec("l‚Äôarracheur de dents dor√©es");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("l‚Äô"); // d√©terminant
    expect(result[2]).toEqual("arracheur de dents"); // nom
    expect(result[3]).toEqual("dor√©es"); // attribut
  });

  it('Groupe Nominal‚ÄØ:  ¬´‚ÄØBruxelles-Capitale‚ÄØ¬ª', () => {
    const result = ExprReg.xGroupeNominal.exec("Bruxelles-Capitale");
    expect(result).not.toEqual(null);
    expect(result[1]).toBeUndefined(); // d√©terminant
    expect(result[2]).toEqual("Bruxelles-Capitale"); // nom
    expect(result[3]).toBeUndefined(); // attribut
  });

  // √âL√âMENT G√âN√âRIQUE SIMPLE
  // - D√©terminant(1), Nom(2), √âpith√®te(3), F√©minin et autre forme(4), Classe(5), Attribut(6).


  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØParis est un lieu‚ÄØ¬ª', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec("Paris est un lieu");
    expect(result).not.toEqual(null);
    expect(result[1]).toBeUndefined(); // d√©terminant
    expect(result[2]).toEqual("Paris"); // nom
    expect(result[3]).toBeUndefined(); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("lieu"); // classe
    expect(result[6]).toBeUndefined(); // attribut
  });


  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØLa table basse est un objet‚ÄØ¬ª', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec("La table basse est un objet");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("La "); // d√©terminant
    expect(result[2]).toEqual("table"); // nom
    expect(result[3]).toEqual("basse"); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("objet"); // classe
    expect(result[6]).toBeUndefined(); // attribut
  })

  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØLe champignon des bois odorant (champignons des bois) est un l√©gume mangeable‚ÄØ¬ª', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec("Le champignon des bois odorant (champignons des bois) est un l√©gume mangeable");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Le "); // d√©terminant
    expect(result[2]).toEqual("champignon des bois"); // nom
    expect(result[3]).toEqual("odorant"); // √©pith√®te
    expect(result[4]).toEqual("(champignons des bois)"); // f√©minin et autre forme
    expect(result[5]).toEqual("l√©gume"); // classe
    expect(result[6]).toEqual("mangeable"); // attribut
  })

  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØL\'apprentie sorci√®re (f) est une personne fatigu√©e‚ÄØ¬ª', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec("L'apprentie sorci√®re (f) est une personne fatigu√©e");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("L'"); // d√©terminant
    expect(result[2]).toEqual("apprentie"); // nom
    expect(result[3]).toEqual("sorci√®re"); // √©pith√®te
    expect(result[4]).toEqual("(f)"); // f√©minin et autre forme
    expect(result[5]).toEqual("personne"); // classe
    expect(result[6]).toEqual("fatigu√©e"); // attribut
  })

  // √âL√âMENT G√âN√âRIQUE POSITIONN√â PAR RAPPORT √Ä UN COMPL√âMENT
  // => determinant(1), nom(2), √©pith√®te(3) f√©minin et autre forme?(4), type(5), attributs(6), position(7), compl√©ment(8)

  it('√âl√©ment g√©n√©rique positionn√©: ¬´‚ÄØLes torches en bois enflam√©es sont des objets maudits dans le jardin‚ÄØ¬ª', () => {
    const result = ExprReg.xPositionElementGeneriqueDefini.exec("Les torches en bois enflam√©es sont des objets maudits dans le jardin");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Les "); // d√©terminant
    expect(result[2]).toEqual("torches en bois"); // nom
    expect(result[3]).toEqual("enflam√©es"); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("objets"); // classe
    expect(result[6]).toEqual("maudits"); // attribut
    expect(result[7]).toEqual("dans le "); // position
    expect(result[8]).toEqual("jardin"); // compl√©ment
  });

  it('√âl√©ment g√©n√©rique positionn√©: ¬´‚ÄØLa pomme de terre (pommes de terre) est un l√©gume pourri dans la grange encorcel√©e‚ÄØ¬ª', () => {
    const result = ExprReg.xPositionElementGeneriqueDefini.exec("La pomme de terre (pommes de terre) est un l√©gume pourri dans la grange encorcel√©e");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("La "); // d√©terminant
    expect(result[2]).toEqual("pomme de terre"); // nom
    expect(result[3]).toBeUndefined(); // √©pith√®te
    expect(result[4]).toEqual("(pommes de terre)"); // f√©minin et autre forme
    expect(result[5]).toEqual("l√©gume"); // classe
    expect(result[6]).toEqual("pourri"); // attribut
    expect(result[7]).toEqual("dans la "); // position
    expect(result[8]).toEqual("grange encorcel√©e"); // compl√©ment
  });

  it('√âl√©ment g√©n√©rique positionn√©: ¬´‚ÄØL‚Äôall√©e principale (f) est un lieu au sud du d√©part‚ÄØ¬ª', () => {
    const result = ExprReg.xPositionElementGeneriqueDefini.exec("L‚Äôall√©e principale (f) est un lieu au sud du d√©part");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("L‚Äô"); // d√©terminant
    expect(result[2]).toEqual("all√©e"); // nom
    expect(result[3]).toEqual("principale"); // √©pith√®te
    expect(result[4]).toEqual("(f)"); // f√©minin et autre forme
    expect(result[5]).toEqual("lieu"); // classe
    expect(result[6]).toBeUndefined(); // attribut
    expect(result[7]).toEqual("au sud du "); // position
    expect(result[8]).toEqual("d√©part"); // compl√©ment
  });

  it('√âl√©ment g√©n√©rique positionn√©: ¬´‚ÄØLa gare est un lieu dans Lisbonne‚ÄØ¬ª', () => {
    const result = ExprReg.xPositionElementGeneriqueDefini.exec("La gare est un lieu dans Lisbonne");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("La "); // d√©terminant
    expect(result[2]).toEqual("gare"); // nom
    expect(result[3]).toBeUndefined(); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("lieu"); // classe
    expect(result[6]).toBeUndefined(); // attribut
    expect(result[7]).toEqual("dans "); // position
    expect(result[8]).toEqual("Lisbonne"); // compl√©ment
  });


  // TYPE UTILISATEUR > NOUVEAU TYPE
  // - un/une(1) nouveauType(2) est un/une typeParent(3) {attributs}(4)

  it('Nouveau type‚ÄØ:  ¬´‚ÄØUn meuble est un objet‚ÄØ¬ª', () => {
    const result = ExprReg.xNouveauType.exec("Un meuble est un objet");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Un"); // d√©terminant
    expect(result[2]).toEqual("meuble"); // nouveau type
    expect(result[3]).toEqual("objet"); // type parent
    expect(result[4]).toBeUndefined(); // attribut(s)
  })

  it('Nouveau type‚ÄØ:  ¬´‚ÄØUn fruit est un objet mangeable, l√©ger et p√©rissable‚ÄØ¬ª', () => {
    const result = ExprReg.xNouveauType.exec("Un fruit est un objet mangeable, l√©ger et p√©rissable");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Un"); // d√©terminant
    expect(result[2]).toEqual("fruit"); // nouveau type
    expect(result[3]).toEqual("objet"); // type parent
    expect(result[4]).toEqual("mangeable, l√©ger et p√©rissable"); // attribut(s)
  });

  it('Nouveau type‚ÄØ:  ¬´‚ÄØun lutin est une personne bavarde‚ÄØ¬ª', () => {
    const result = ExprReg.xNouveauType.exec("un lutin est une personne bavarde");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("un"); // d√©terminant
    expect(result[2]).toEqual("lutin"); // nouveau type
    expect(result[3]).toEqual("personne"); // type parent
    expect(result[4]).toEqual("bavarde"); // attribut(s)
  });

  
  it('Nouveau type‚ÄØ:  ¬´‚ÄØle lutin est une personne bavarde‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xNouveauType.exec("le lutin est une personne bavarde");
    expect(result).toEqual(null);
  });

  it('Nouveau type‚ÄØ:  ¬´‚ÄØUn meuble est fix√©‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xNouveauType.exec("Un meuble est fix√©");
    expect(result).toEqual(null);
  });

  // TYPE UTILISATEUR > PR√âCISION TYPE
  // - un/une(1) type(2) est {attributs}(3)

  it('Pr√©cision type‚ÄØ:  ¬´‚ÄØUn meuble est fix√©‚ÄØ¬ª', () => {
    const result = ExprReg.xPrecisionType.exec("Un meuble est fix√©");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Un"); // d√©terminant
    expect(result[2]).toEqual("meuble"); // nouveau type
    expect(result[3]).toEqual("fix√©"); // attribut(s)
  });

  it('Pr√©cision type‚ÄØ:  ¬´‚ÄØun chien est affectueux et poilu‚ÄØ¬ª', () => {
    const result = ExprReg.xPrecisionType.exec("un chien est affectueux et poilu");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("un"); // d√©terminant
    expect(result[2]).toEqual("chien"); // nouveau type
    expect(result[3]).toEqual("affectueux et poilu"); // attribut(s)
  });

  it('Pr√©cision type‚ÄØ:  ¬´‚ÄØUn lutin est bavard, peureux et farceur‚ÄØ¬ª', () => {
    const result = ExprReg.xPrecisionType.exec("Un lutin est bavard, peureux et farceur");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Un"); // d√©terminant
    expect(result[2]).toEqual("lutin"); // nouveau type
    expect(result[3]).toEqual("bavard, peureux et farceur"); // attribut(s)
  });

  it('Pr√©cision type‚ÄØ:  ¬´‚ÄØUn meuble est un objet‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xPrecisionType.exec("Un meuble est un objet");
    expect(result).toEqual(null);
  });

  it('Pr√©cision type‚ÄØ:  ¬´‚ÄØUn fruit est un objet mangeable, l√©ger et p√©rissable‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xPrecisionType.exec("Un fruit est un objet mangeable, l√©ger et p√©rissable");
    expect(result).toEqual(null);
  });

  it('Pr√©cision type‚ÄØ:  ¬´‚ÄØUn lutin est une personne bavarde‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xPrecisionType.exec("Un lutin est une personne bavarde");
    expect(result).toEqual(null);
  });

  it('Pr√©cision type‚ÄØ:  ¬´‚ÄØLe meuble est fix√©‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xPrecisionType.exec("Le meuble est fix√©");
    expect(result).toEqual(null);
  });

});