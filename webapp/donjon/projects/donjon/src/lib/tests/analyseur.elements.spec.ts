import { Analyseur } from "../utils/compilation/analyseur/analyseur";
import { AnalyseurElementPosition } from "../utils/compilation/analyseur/analyseur.element.position";
import { AnalyseurElementSimple } from "../utils/compilation/analyseur/analyseur.element.simple";
import { AnalyseurUtils } from "../utils/compilation/analyseur/analyseur.utils";
import { Compilateur } from "../utils/compilation/compilateur";
import { ContexteAnalyse } from "../models/compilateur/contexte-analyse";
import { EClasseRacine } from "../models/commun/constantes";
import { ExprReg } from "../utils/compilation/expr-reg";
import { Genre } from "../models/commun/genre.enum";
import { Nombre } from "../models/commun/nombre.enum";
import { PositionSujetString } from "../models/compilateur/position-sujet";
import { ResultatAnalysePhrase } from "../models/compilateur/resultat-analyse-phrase";

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
//    [1/2] EXPRESSIONS R√âGULI√àRES
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

describe('Epressions r√©guli√®res ‚àí Groupes nominaux', () => {

  // GROUPE NOMINAL
  // - D√©terminant(1), Nom(2), √âpith√®te(3)

  it('Groupe Nominal‚ÄØ: ¬´‚ÄØLa pomme de terre pourrie ¬ª', () => {
    const result = ExprReg.xGroupeNominalArticleDefini.exec("La pomme de terre pourrie");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("La "); // d√©terminant
    expect(result[2]).toEqual("pomme de terre"); // nom
    expect(result[3]).toEqual("pourrie"); // attribut
  });

  it('Groupe Nominal‚ÄØ: ¬´‚ÄØla canne √† p√®che ¬ª', () => {
    const result = ExprReg.xGroupeNominalArticleDefini.exec("la canne √† p√®che");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("la "); // d√©terminant
    expect(result[2]).toEqual("canne √† p√®che"); // nom
    expect(result[3]).toBeUndefined(); // attribut
  });

  it('Groupe Nominal‚ÄØ: ¬´‚ÄØle chapeau gris ¬ª', () => {
    const result = ExprReg.xGroupeNominalArticleDefini.exec("le chapeau gris");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("le "); // d√©terminant
    expect(result[2]).toEqual("chapeau"); // nom
    expect(result[3]).toEqual("gris"); // attribut
  });


  it('Groupe Nominal‚ÄØ: ¬´‚ÄØchapeau ¬ª', () => {
    const result = ExprReg.xGroupeNominalArticleDefini.exec("chapeau");
    expect(result).not.toEqual(null);
    expect(result[1]).toBeUndefined(); // d√©terminant
    expect(result[2]).toEqual("chapeau"); // nom
    expect(result[3]).toBeUndefined(); // attribut
  });

  it('Groupe Nominal‚ÄØ: ¬´‚ÄØle chapeau ¬ª', () => {
    const result = ExprReg.xGroupeNominalArticleDefini.exec("le chapeau");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("le "); // d√©terminant
    expect(result[2]).toEqual("chapeau"); // nom
    expect(result[3]).toBeUndefined(); // attribut
  });

  it('Groupe Nominal‚ÄØ: ¬´‚ÄØl‚Äôarracheur de dents dor√©es ¬ª', () => {
    const result = ExprReg.xGroupeNominalArticleDefini.exec("l‚Äôarracheur de dents dor√©es");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("l‚Äô"); // d√©terminant
    expect(result[2]).toEqual("arracheur de dents"); // nom
    expect(result[3]).toEqual("dor√©es"); // attribut
  });

  it('Groupe Nominal‚ÄØ: ¬´‚ÄØBruxelles-Capitale‚ÄØ¬ª', () => {
    const result = ExprReg.xGroupeNominalArticleDefini.exec("Bruxelles-Capitale");
    expect(result).not.toEqual(null);
    expect(result[1]).toBeUndefined(); // d√©terminant
    expect(result[2]).toEqual("Bruxelles-Capitale"); // nom
    expect(result[3]).toBeUndefined(); // attribut
  });

  it('Groupe Nominal‚ÄØ: ¬´‚ÄØlettre‚ÄØ¬ª', () => {
    const result = ExprReg.xGroupeNominalArticleDefini.exec("lettre");
    expect(result).not.toEqual(null);
    expect(result[1]).toBeUndefined(); // d√©terminant
    expect(result[2]).toEqual("lettre"); // nom
    expect(result[3]).toBeUndefined(); // attribut
  });

  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØ20 tomates‚ÄØ¬ª ', () => {
    const result = ExprReg.xGroupeNominalArticleDefini.exec("20 tomates");
    expect(result).toEqual(null);
  });

  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØune tomate‚ÄØ¬ª ', () => {
    const result = ExprReg.xGroupeNominalArticleDefini.exec("une tomate");
    expect(result).toEqual(null);
  });

  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØdes pi√®ces‚ÄØ¬ª ', () => {
    const result = ExprReg.xGroupeNominalArticleDefini.exec("des pi√®ces");
    expect(result).toEqual(null);
  });

  it('Groupe Nominal‚ÄØ: ¬´‚ÄØ"texte"‚ÄØ¬ª  (üí•)', () => {
    const result = ExprReg.xGroupeNominalArticleDefini.exec('"texte"');
    expect(result).toEqual(null);
  });


});

describe('Epressions r√©guli√®res ‚àí D√©finition des √©l√©ments', () => {

  // √âL√âMENT G√âN√âRIQUE SIMPLE
  // - D√©terminant(1), Nom(2), √âpith√®te(3), F√©minin et autre forme(4), Classe(5), Attribut(6).


  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØParis est un lieu‚ÄØ¬ª', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec("Paris est un lieu");
    expect(result).not.toEqual(null);
    expect(result[1]).toBeUndefined(); // d√©terminant
    expect(result[2]).toEqual("Paris"); // nom
    expect(result[3]).toBeUndefined(); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("lieu"); // classe
    expect(result[6]).toBeUndefined(); // attribut
    expect(result[7]).toBeUndefined(); // position
    expect(result[8]).toBeUndefined(); // compl√©ment
    expect(result[9]).toBeUndefined(); // ici
  });


  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØsi ceci est un √©l√©ment, dire "bla bla"‚ÄØ¬ª  (üí•)', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec('si ceci est un √©l√©ment, dire "bla bla"');
    expect(result).toEqual(null);
  });


  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØLa table basse est un objet‚ÄØ¬ª', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec("La table basse est un objet");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("La "); // d√©terminant
    expect(result[2]).toEqual("table"); // nom
    expect(result[3]).toEqual("basse"); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("objet"); // classe
    expect(result[6]).toBeUndefined(); // attribut
    expect(result[7]).toBeUndefined(); // position
    expect(result[8]).toBeUndefined(); // compl√©ment
    expect(result[9]).toBeUndefined(); // ici
  })

  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØLe champignon des bois odorant (champignons des bois) est un l√©gume mangeable‚ÄØ¬ª', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec("Le champignon des bois odorant (champignons des bois) est un l√©gume mangeable");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Le "); // d√©terminant
    expect(result[2]).toEqual("champignon des bois"); // nom
    expect(result[3]).toEqual("odorant"); // √©pith√®te
    expect(result[4]).toEqual("(champignons des bois)"); // f√©minin et autre forme
    expect(result[5]).toEqual("l√©gume"); // classe
    expect(result[6]).toEqual("mangeable"); // attribut
    expect(result[7]).toBeUndefined(); // position
    expect(result[8]).toBeUndefined(); // compl√©ment
    expect(result[9]).toBeUndefined(); // ici
  })

  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØL\'apprentie sorci√®re (f) est une personne fatigu√©e‚ÄØ¬ª', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec("L'apprentie sorci√®re (f) est une personne fatigu√©e");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("L'"); // d√©terminant
    expect(result[2]).toEqual("apprentie"); // nom
    expect(result[3]).toEqual("sorci√®re"); // √©pith√®te
    expect(result[4]).toEqual("(f)"); // f√©minin et autre forme
    expect(result[5]).toEqual("personne"); // classe
    expect(result[6]).toEqual("fatigu√©e"); // attribut
  })

  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØCe sont des fruits‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec("Ce sont des fruits");
    expect(result).toEqual(null);
  })

  it('√âl√©ment g√©n√©rique simple: ¬´‚ÄØLe bucheron est une personne ici‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xDefinitionElementAvecType.exec("Le bucheron est une personne ici");
    expect(result).toEqual(null);
  })

  // √âL√âMENT G√âN√âRIQUE POSITIONN√â PAR RAPPORT √Ä UN COMPL√âMENT
  // => determinant(1), nom(2), √©pith√®te(3) f√©minin et autre forme?(4), type(5), attributs(6), position(7), compl√©ment(8)

  it('√âl√©ment g√©n√©rique positionn√©: ¬´‚ÄØLes torches en bois enflam√©es sont des objets maudits dans le jardin‚ÄØ¬ª', () => {
    const result = ExprReg.xPositionElementGeneriqueDefini.exec("Les torches en bois enflam√©es sont des objets maudits dans le jardin");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Les "); // d√©terminant
    expect(result[2]).toEqual("torches en bois"); // nom
    expect(result[3]).toEqual("enflam√©es"); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("objets"); // classe
    expect(result[6]).toEqual("maudits"); // attribut
    expect(result[7]).toEqual("dans le "); // position
    expect(result[8]).toEqual("jardin"); // compl√©ment
    expect(result[9]).toBeUndefined(); // ici

  });

  it('√âl√©ment g√©n√©rique positionn√©: ¬´‚ÄØLa pomme de terre (pommes de terre) est un l√©gume pourri dans la grange encorcel√©e‚ÄØ¬ª', () => {
    const result = ExprReg.xPositionElementGeneriqueDefini.exec("La pomme de terre (pommes de terre) est un l√©gume pourri dans la grange encorcel√©e");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("La "); // d√©terminant
    expect(result[2]).toEqual("pomme de terre"); // nom
    expect(result[3]).toBeUndefined(); // √©pith√®te
    expect(result[4]).toEqual("(pommes de terre)"); // f√©minin et autre forme
    expect(result[5]).toEqual("l√©gume"); // classe
    expect(result[6]).toEqual("pourri"); // attribut
    expect(result[7]).toEqual("dans la "); // position
    expect(result[8]).toEqual("grange encorcel√©e"); // compl√©ment
    expect(result[9]).toBeUndefined(); // ici

  });

  it('√âl√©ment g√©n√©rique positionn√©: ¬´‚ÄØL‚Äôall√©e principale (f) est un lieu au sud du d√©part‚ÄØ¬ª', () => {
    const result = ExprReg.xPositionElementGeneriqueDefini.exec("L‚Äôall√©e principale (f) est un lieu au sud du d√©part");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("L‚Äô"); // d√©terminant
    expect(result[2]).toEqual("all√©e"); // nom
    expect(result[3]).toEqual("principale"); // √©pith√®te
    expect(result[4]).toEqual("(f)"); // f√©minin et autre forme
    expect(result[5]).toEqual("lieu"); // classe
    expect(result[6]).toBeUndefined(); // attribut
    expect(result[7]).toEqual("au sud du "); // position
    expect(result[8]).toEqual("d√©part"); // compl√©ment
    expect(result[9]).toBeUndefined(); // ici

  });

  it('√âl√©ment g√©n√©rique positionn√©: ¬´‚ÄØLa gare est un lieu dans Lisbonne‚ÄØ¬ª', () => {
    const result = ExprReg.xPositionElementGeneriqueDefini.exec("La gare est un lieu dans Lisbonne");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("La "); // d√©terminant
    expect(result[2]).toEqual("gare"); // nom
    expect(result[3]).toBeUndefined(); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("lieu"); // classe
    expect(result[6]).toBeUndefined(); // attribut
    expect(result[7]).toEqual("dans "); // position
    expect(result[8]).toEqual("Lisbonne"); // compl√©ment
    expect(result[9]).toBeUndefined(); // ici

  });

  it('√âl√©ment g√©n√©rique positionn√©: ¬´‚ÄØLe bucheron est une personne ici‚ÄØ¬ª', () => {
    const result = ExprReg.xPositionElementGeneriqueDefini.exec("Le bucheron est une personne ici");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Le "); // d√©terminant
    expect(result[2]).toEqual("bucheron"); // nom
    expect(result[3]).toBeUndefined(); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("personne"); // classe
    expect(result[6]).toBeUndefined(); // attribut
    expect(result[7]).toBeUndefined(); // position
    expect(result[8]).toBeUndefined(); // compl√©ment
    expect(result[9]).toEqual("ici"); // ici
  });

  it('√âl√©ment g√©n√©rique positionn√©: ¬´‚ÄØLe cadenas bleu est dans le labo‚ÄØ¬ª', () => {
    const result = ExprReg.xPositionElementGeneriqueDefini.exec("Le cadenas bleu est dans le labo");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Le "); // d√©terminant
    expect(result[2]).toEqual("cadenas"); // nom
    expect(result[3]).toEqual("bleu"); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toBeUndefined(); // classe
    expect(result[6]).toBeUndefined(); // attribut
    expect(result[7]).toEqual("dans le "); // position
    expect(result[8]).toEqual("labo"); // compl√©ment
    expect(result[9]).toBeUndefined(); // ici
  });


  it('√âl√©ment g√©n√©rique positionn√©: ¬´‚ÄØLe cadenas bleu est un objet dans le labo‚ÄØ¬ª', () => {
    const result = ExprReg.xPositionElementGeneriqueDefini.exec("Le cadenas bleu est un objet dans le labo");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Le "); // d√©terminant
    expect(result[2]).toEqual("cadenas"); // nom
    expect(result[3]).toEqual("bleu"); // √©pith√®te
    expect(result[4]).toBeUndefined(); // f√©minin et autre forme
    expect(result[5]).toEqual("objet"); // classe
    expect(result[6]).toBeUndefined(); // attribut
    expect(result[7]).toEqual("dans le "); // position
    expect(result[8]).toEqual("labo"); // compl√©ment
    expect(result[9]).toBeUndefined(); // ici
  });

});

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
//    [2/2] ANALYSEUR
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

describe('Analyseur ‚àí D√©finition de nouveaux √©l√©ments', () => {

  // =========================================================
  // √âL√âMENTS SANS POSITION
  // =========================================================

  it('√âl√©ment sans pos: ¬´‚ÄØLa cuisine est un lieu.‚ÄØ¬ª', () => {
    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "La cuisine est un lieu."
    );
    expect(phrases).toHaveSize(1); // 1 phrase
    expect(phrases[0].phrase).toHaveSize(1); // 1 morceau
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    // tester l‚Äôanalyse sp√©cifique
    const el = AnalyseurElementSimple.testerElementSansPosition(phrases[0], ctxAnalyse); // analyser phrase
    expect(el).not.toBeNull(); // √©l√©ment trouv√©
    ctxAnalyse.dernierElementGenerique = el; // dernier √©l√©ment trouv√©
    expect(el.determinant).toEqual('la '); // d√©terminant
    expect(el.nom).toEqual('cuisine'); // nom
    expect(el.epithete).toBeUndefined(); // √©pith√®te pas d√©fini
    expect(el.genre).toEqual(Genre.f); // genre
    expect(el.nombre).toEqual(Nombre.s); // nombre
    expect(el.quantite).toEqual(1); // quantit√©
    expect(el.classeIntitule).not.toBeNull(); // intitul√© classe d√©fini
    expect(el.classeIntitule).toEqual(EClasseRacine.lieu); // intitul√© classe
    expect(el.positionString).toHaveSize(0); // position pas d√©finie
    AnalyseurUtils.ajouterDescriptionDernierElement(phrases[0], ctxAnalyse); // ajout description √©ventuelle
    expect(el.description).toBeNull(); // desrcription pas d√©finie
    expect(el.capacites).toHaveSize(0); // aucune capacit√©
    expect(el.attributs).toHaveSize(0); // aucun attribut
    expect(el.proprietes).toHaveSize(0); // aucune propri√©t√©
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

  });

  it('√âl√©ment sans pos: ¬´‚ÄØParis (f) est un lieu gris. "Vous √™tes dans Paris.".‚ÄØ¬ª', () => {
    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      'Paris (f) est un lieu gris. "Vous √™tes dans Paris.".'
    );
    expect(phrases).toHaveSize(1); // 1 phrase
    expect(phrases[0].phrase).toHaveSize(2); // 2 morceaux
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    // tester l‚Äôanalyse sp√©cifique
    const el = AnalyseurElementSimple.testerElementSansPosition(phrases[0], ctxAnalyse); // analyser phrase
    expect(el).not.toBeNull(); // √©l√©ment trouv√©
    ctxAnalyse.dernierElementGenerique = el; // dernier √©l√©ment trouv√©
    expect(el.determinant).toBeNull(); // d√©terminant
    expect(el.nom).toEqual('Paris'); // nom
    expect(el.epithete).toBeUndefined(); // √©pith√®te pas d√©fini
    expect(el.genre).toEqual(Genre.f); // genre
    expect(el.nombre).toEqual(Nombre.s); // nombre
    expect(el.quantite).toEqual(1); // quantit√©
    expect(el.classeIntitule).not.toBeNull(); // intitul√© classe d√©fini
    expect(el.classeIntitule).toEqual(EClasseRacine.lieu); // intitul√© classe
    expect(el.positionString).toHaveSize(0); // position pas d√©finie
    AnalyseurUtils.ajouterDescriptionDernierElement(phrases[0], ctxAnalyse); // ajout description √©ventuelle
    expect(el.description).toBe('Vous √™tes dans Paris.'); // desrcription d√©finie
    expect(el.capacites).toHaveSize(0); // aucune capacit√©
    expect(el.attributs).toHaveSize(1); // aucun attribut
    expect(el.proprietes).toHaveSize(0); // aucune propri√©t√©
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

  });

  it('√âl√©ment sans pos: ¬´‚ÄØLa ch√¢teau du comte est un lieu au nord du village.‚ÄØ¬ª (üí•)', () => {
    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "La ch√¢teau du comte est un lieu au nord du village."
    );
    expect(phrases).toHaveSize(1); // 1 phrase
    expect(phrases[0].phrase).toHaveSize(1); // 1 morceau
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementAvecPosition);
    // tester l‚Äôanalyse sp√©cifique
    const resultat = AnalyseurElementSimple.testerElementSansPosition(phrases[0], ctxAnalyse);
    expect(resultat).toBeNull(); // r√©sultat PAS trouv√©.
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

  });

  it('√âl√©ment sans pos: ¬´‚ÄØUn lutin est une personne.‚ÄØ¬ª (üí•)', () => {
    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "Un lutin est une personne."
    );
    expect(phrases).toHaveSize(1); // 1 phrase
    expect(phrases[0].phrase).toHaveSize(1); // 1 morceau
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.type);
    // tester l‚Äôanalyse sp√©cifique
    const resultat = AnalyseurElementSimple.testerElementSansPosition(phrases[0], ctxAnalyse);
    expect(resultat).toBeNull(); // r√©sultat PAS trouv√©.
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

  });


  // =========================================================
  // √âL√âMENT AVEC POSITION
  // =========================================================


  it('√âl√©ment pos: ¬´‚ÄØLe ch√¢teau du comte est un lieu au nord du village.‚ÄØ¬ª', () => {
    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "Le ch√¢teau du comte est un lieu au nord du village."
    );
    expect(phrases).toHaveSize(1); // 1 phrase
    expect(phrases[0].phrase).toHaveSize(1); // 1 morceau
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementAvecPosition);
    // tester l‚Äôanalyse sp√©cifique
    const el = AnalyseurElementPosition.testerElementAvecPosition(phrases[0], ctxAnalyse); // analyser phrase
    expect(el).not.toBeNull(); // √©l√©ment trouv√©
    ctxAnalyse.dernierElementGenerique = el; // dernier √©l√©ment trouv√©
    expect(el.determinant).toEqual('le '); // d√©terminant
    expect(el.nom).toEqual('ch√¢teau du comte'); // nom de l‚Äô√©l√©ment
    expect(el.epithete).toBeUndefined(); // √©pith√®te pas d√©fini
    expect(el.genre).toEqual(Genre.m); // genre
    expect(el.nombre).toEqual(Nombre.s); // nombre
    expect(el.quantite).toEqual(1); // quantit√©
    expect(el.classeIntitule).not.toBeNull(); // intitul√© classe d√©fini
    expect(el.classeIntitule).toEqual(EClasseRacine.lieu); // intitul√© classe
    expect(el.positionString).toHaveSize(1); // position d√©finie
    expect(el.positionString[0]).toEqual(new PositionSujetString('ch√¢teau du comte', 'village', 'au nord du ')); // position
    AnalyseurUtils.ajouterDescriptionDernierElement(phrases[0], ctxAnalyse); // ajout description √©ventuelle
    expect(el.description).toBeNull(); // desrcription pas d√©finie
    expect(el.capacites).toHaveSize(0); // aucune capacit√©
    expect(el.attributs).toHaveSize(0); // aucun attribut
    expect(el.proprietes).toHaveSize(0); // aucune propri√©t√©
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

  });

  it('√âl√©ment pos: ¬´‚ÄØLe cadenas bleu est un objet dans le labo.‚ÄØ¬ª', () => {
    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "Le cadenas bleu est un objet dans le labo."
    );
    expect(phrases).toHaveSize(1); // 1 phrase
    expect(phrases[0].phrase).toHaveSize(1); // 1 morceau
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementAvecPosition);
    // tester l‚Äôanalyse sp√©cifique
    const el = AnalyseurElementPosition.testerElementAvecPosition(phrases[0], ctxAnalyse); // analyser phrase
    expect(el).not.toBeNull(); // √©l√©ment trouv√©
    ctxAnalyse.dernierElementGenerique = el; // dernier √©l√©ment trouv√©
    expect(el.determinant).toEqual('le '); // d√©terminant
    expect(el.nom).toEqual('cadenas'); // nom de l‚Äô√©l√©ment
    expect(el.epithete).toEqual('bleu'); // √©pith√®te pas d√©fini
    expect(el.genre).toEqual(Genre.m); // genre
    expect(el.nombre).toEqual(Nombre.s); // nombre
    expect(el.quantite).toEqual(1); // quantit√©
    expect(el.classeIntitule).not.toBeNull(); // intitul√© classe d√©fini
    expect(el.classeIntitule).toEqual(EClasseRacine.objet); // intitul√© classe
    expect(el.positionString).toHaveSize(1); // position d√©finie
    expect(el.positionString[0]).toEqual(new PositionSujetString('cadenas bleu', 'labo', 'dans le ')); // position
    AnalyseurUtils.ajouterDescriptionDernierElement(phrases[0], ctxAnalyse); // ajout description √©ventuelle
    expect(el.description).toBeNull(); // desrcription pas d√©finie
    expect(el.capacites).toHaveSize(0); // aucune capacit√©
    expect(el.attributs).toHaveSize(0); // aucun attribut
    expect(el.proprietes).toHaveSize(0); // aucune propri√©t√©
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

  });

  it('√âl√©ment pos: ¬´‚ÄØLe ch√¢teau du comte est un lieu au nord de le village.‚ÄØ¬ª (üí•)', () => {
    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "Le ch√¢teau du comte est un lieu au nord de le village."
    );
    expect(phrases).toHaveSize(1); // 1 phrase
    expect(phrases[0].phrase).toHaveSize(1); // 1 morceau
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.aucun);
    // tester l‚Äôanalyse sp√©cifique
    const resultat = AnalyseurElementPosition.testerElementAvecPosition(phrases[0], ctxAnalyse);
    expect(resultat).toBeNull(); // r√©sultat PAS trouv√©.
    expect(ctxAnalyse.erreurs).toHaveSize(1); // aucune erreur
  });


  it('√âl√©ment pos: ¬´‚ÄØL‚Äôabri est un lieu sombre.‚ÄØ¬ª (üí•)', () => {
    let ctxAnalyse = new ContexteAnalyse();
    let phrases = Compilateur.convertirCodeSourceEnPhrases(
      "L‚Äôabri est un lieu sombre."
    );
    expect(phrases).toHaveSize(1); // 1 phrase
    expect(phrases[0].phrase).toHaveSize(1); // 1 morceau
    // tester l‚Äôanalyse compl√®te
    expect(Analyseur.analyserPhrase(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    // tester l‚Äôanalyse sp√©cifique
    const resultat = AnalyseurElementPosition.testerElementAvecPosition(phrases[0], ctxAnalyse);
    expect(resultat).toBeNull(); // r√©sultat PAS trouv√©.
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

  });
});

