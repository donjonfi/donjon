import { CodeMessage } from "../models/compilateur/message-analyse";
import { CompilateurV8 } from "../utils/compilation/compilateur-v8";
import { ExprReg } from "../utils/compilation/expr-reg";

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
//    [1/2] EXPRESSIONS RÃ‰GULIÃˆRES
// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV


describe('dÃ©finition action: complÃ©ments ceci/cela:â€¯type et Ã©tats âˆ’ Epressions rÃ©guliÃ¨res', () => {

  it('Ceci est un objet possÃ©dÃ©', () => {
    const result = ExprReg.rDefinitionComplementActionTypeEtat.exec('Ceci est un objet possÃ©dÃ©');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('Ceci'); // ceci/cela
    expect(result[2]).toEqual('un'); // un/une
    expect(result[3]).toEqual('objet'); // type
    expect(result[4]).toEqual('possÃ©dÃ©'); // Ã©tats requis
    expect(result[5]).toBeFalsy(); // Ã©tats prioritaires
  });

  it('ceci est un objet possÃ©dÃ© ou disponible prioritairement visible', () => {
    const result = ExprReg.rDefinitionComplementActionTypeEtat.exec('ceci est un objet possÃ©dÃ© ou disponible prioritairement visible');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('ceci'); // ceci/cela
    expect(result[2]).toEqual('un'); // un/une
    expect(result[3]).toEqual('objet'); // type
    expect(result[4]).toEqual('possÃ©dÃ© ou disponible'); // Ã©tats requis
    expect(result[5]).toEqual('visible'); // Ã©tats prioritaires
  });

  it('ðŸ’¥ cela est de lâ€™eau', () => {
    const result = ExprReg.rDefinitionComplementActionTypeEtat.exec('cela est de lâ€™eau');
    expect(result).toBeFalsy();
  });

  it('cela est un lieu', () => {
    const result = ExprReg.rDefinitionComplementActionTypeEtat.exec('cela est un lieu');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('cela'); // ceci/cela
    expect(result[2]).toEqual('un'); // un/une
    expect(result[3]).toEqual('lieu'); // type
    expect(result[4]).toBeFalsy(); // Ã©tats requis
    expect(result[5]).toBeFalsy(); // Ã©tats prioritaires
  });

  it('Cela est une licorne petite et mignone prioritairement gentille ou amicale', () => {
    const result = ExprReg.rDefinitionComplementActionTypeEtat.exec('Cela est une licorne petite et mignone prioritairement gentille ou amicale');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('Cela'); // ceci/cela
    expect(result[2]).toEqual('une'); // un/une
    expect(result[3]).toEqual('licorne'); // type
    expect(result[4]).toEqual('petite et mignone'); // Ã©tats requis
    expect(result[5]).toEqual('gentille ou amicale'); // Ã©tats prioritaires
  });

});


describe('dÃ©finition action: complÃ©ments ceci/cela:â€¯Ã©tats prioritaires âˆ’ Epressions rÃ©guliÃ¨res', () => {

  it('ceci est prioritairement dÃ©placÃ© ou fixÃ©', () => {
    const result = ExprReg.rDefinitionComplementActionEtatPrioritaire.exec('ceci est prioritairement dÃ©placÃ© ou fixÃ©');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('ceci'); // ceci/cela
    expect(result[2]).toEqual('dÃ©placÃ© ou fixÃ©'); // Ã©tats prioritaires
  });

  it('Cela est prioritairement disponible', () => {
    const result = ExprReg.rDefinitionComplementActionEtatPrioritaire.exec('Cela est prioritairement disponible');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('Cela'); // ceci/cela
    expect(result[2]).toEqual('disponible'); // Ã©tats prioritaires
  });

  it('ðŸ’¥ ceci est ouvert', () => {
    const result = ExprReg.rDefinitionComplementActionEtatPrioritaire.exec('ceci est ouvert');
    expect(result).toBeFalsy();
  });

});

describe('dÃ©finition action: complÃ©ments ceci/cela:â€¯Ã©lÃ©ment jeu âˆ’ Epressions rÃ©guliÃ¨res', () => {

  it('Ceci est Jonathan', () => {
    const result = ExprReg.rDefinitionComplementActionElementJeu.exec('Ceci est Jonathan');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('Ceci'); // ceci/cela
    expect(result[2]).toEqual('Jonathan'); // Ã©lÃ©ment du jeu
  });

  it('Cela sont les Ã©toiles', () => {
    const result = ExprReg.rDefinitionComplementActionElementJeu.exec('Cela sont les Ã©toiles');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('Cela'); // ceci/cela
    expect(result[2]).toEqual('Ã©toiles'); // Ã©lÃ©ment du jeu
  });

  it('ceci est Elrik', () => {
    const result = ExprReg.rDefinitionComplementActionElementJeu.exec('ceci est Elrik');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('ceci'); // ceci/cela
    expect(result[2]).toEqual('Elrik'); // Ã©lÃ©ment du jeu
  });

  it('cela est le capitaine', () => {
    const result = ExprReg.rDefinitionComplementActionElementJeu.exec('cela est le capitaine');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('cela'); // ceci/cela
    expect(result[2]).toEqual('capitaine'); // Ã©lÃ©ment du jeu
  });

  it('Ceci est le comte du bois dormant', () => {
    const result = ExprReg.rDefinitionComplementActionElementJeu.exec('Ceci est le comte du bois dormant');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('Ceci'); // ceci/cela
    expect(result[2]).toEqual('comte du bois dormant'); // Ã©lÃ©ment du jeu
  });

  it('Cela est Petit Nez', () => {
    const result = ExprReg.rDefinitionComplementActionElementJeu.exec('Cela est Petit Nez');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('Cela'); // ceci/cela
    expect(result[2]).toEqual('Petit Nez'); // Ã©lÃ©ment du jeu
  });

  it('cela est de l\'eau', () => {
    const result = ExprReg.rDefinitionComplementActionElementJeu.exec('cela est de l\'eau');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('cela'); // ceci/cela
    expect(result[2]).toEqual('eau'); // Ã©lÃ©ment du jeu
  });

  it('cela est un contenant', () => {
    const result = ExprReg.rDefinitionComplementActionElementJeu.exec('cela est un contenant');
    expect(result).toBeFalsy();
  });

});

describe('ComplÃ©ment action EstSoitNiPas âˆ’ Epressions rÃ©guliÃ¨res', () => {

  it('Ceci est un lieu', () => {
    const result = ExprReg.rComplementActionEstSoitNiPas.exec('Ceci est un lieu');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('Ceci '); // ceci/cela
    expect(result[2]).toBeFalsy(); // soit|ni|pas
    expect(result[3]).toEqual('un lieu'); // suite
  });

  it('Cela est un objet visible et accessible', () => {
    const result = ExprReg.rComplementActionEstSoitNiPas.exec('Cela est un objet visible et accessible');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('Cela '); // ceci/cela
    expect(result[2]).toBeFalsy(); // soit|ni|pas
    expect(result[3]).toEqual('un objet visible et accessible'); // suite
  });

  it('est soit un lieu soit un objet visible et accessible', () => {
    const result = ExprReg.rComplementActionEstSoitNiPas.exec('est soit un lieu soit un objet visible et accessible');
    expect(result).toBeTruthy();
    expect(result[1]).toBeFalsy(); // ceci/cela
    expect(result[2]).toEqual('soit'); // soit|ni|pas
    expect(result[3]).toEqual('un lieu soit un objet visible et accessible'); // suite
  });

  it('nâ€™est ni un bijou ni buvable', () => {
    const result = ExprReg.rComplementActionEstSoitNiPas.exec('nâ€™est ni un bijou ni buvable');
    expect(result).toBeTruthy();
    expect(result[1]).toBeFalsy(); // ceci/cela
    expect(result[2]).toEqual('ni'); // soit|ni|pas
    expect(result[3]).toEqual('un bijou ni buvable'); // suite
  });

  it('nâ€™est pas Jean-Louis', () => {
    const result = ExprReg.rComplementActionEstSoitNiPas.exec('nâ€™est pas Jean-Louis');
    expect(result).toBeTruthy();
    expect(result[1]).toBeFalsy(); // ceci/cela
    expect(result[2]).toEqual('pas'); // soit|ni|pas
    expect(result[3]).toEqual('Jean-Louis'); // suite
  });

});

describe('dÃ©finition action: dÃ©placement joueur âˆ’ Epressions rÃ©guliÃ¨res', () => {

  it('Lâ€™action dÃ©place le joueur vers ceci', () => {
    const result = ExprReg.rDefinitionActionDeplacementJoueur.exec('Lâ€™action dÃ©place le joueur vers ceci');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('ceci'); // ceci/cela
  });

  it('Le joueur est dÃ©placÃ© vers cela', () => {
    const result = ExprReg.rDefinitionActionDeplacementJoueur.exec('Le joueur est dÃ©placÃ© vers cela');
    expect(result).toBeTruthy();
    expect(result[1]).toEqual('cela'); // ceci/cela
  });

});

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
//    [2/2] DÃ‰FINITION DES COMPLÃ‰MENTS DE Lâ€™ACTION
// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

describe('Traiter les complÃ©ments dâ€™une action', () => {

  it('action sauter (sans complÃ©ment)', function () {
    let scenario =
      'action sauter:\n' +
      '    dire "Vous sautez."\n' +
      'fin action\n' +
      '\n' +
      '';

    const res = CompilateurV8.analyserScenarioSeul(scenario);
    // vÃ©rifier si on a bien crÃ©Ã© lâ€™action
    expect(res.messages).toHaveSize(0);
    expect(res.actions).toHaveSize(1);
    const monAction = res.actions[0];
    expect(monAction.infinitif).toEqual('sauter');
    expect(monAction.phaseExecution).toHaveSize(1);
    // pas de complÃ©ment
    expect(monAction.ceci).toBeFalse();
    expect(monAction.cela).toBeFalse();
  });

  it('action manger ceci (objet visible et accessible prioritairement mangeable)', function () {
    let scenario =
      'action manger ceci:\n' +
      '  dÃ©finitions:\n' +
      '    Ceci est un objet visible et accessible prioritairement mangeable.\n' +
      '  phase exÃ©cution:\n' +
      '    dire "Vous lâ€™avez mangÃ©!".\n' +
      'fin action\n' +
      '\n' +
      '';

    const res = CompilateurV8.analyserScenarioSeul(scenario);
    // vÃ©rifier si on a bien crÃ©Ã© lâ€™action
    expect(res.messages).toHaveSize(0);
    expect(res.actions).toHaveSize(1);
    const monAction = res.actions[0];
    expect(monAction.infinitif).toEqual('manger');
    expect(monAction.phaseExecution).toHaveSize(1);
    // complÃ©ment ceci
    expect(monAction.ceci).toBeTrue();
    expect(monAction.cibleCeci).toBeTruthy();
    expect(monAction.cibleCeci.nomEpithete).toBe('objet visible et accessible');
    expect(monAction.cibleCeci.determinant).toBe('un');
    expect(monAction.cibleCeci.nom).toBe('objet');
    expect(monAction.cibleCeci.epithete).toBe('visible et accessible');
    expect(monAction.cibleCeci.priorite).toBe('mangeable');
    // complÃ©ment cela
    expect(monAction.cela).toBeFalse();
    expect(monAction.cibleCela).toBeFalsy();
  });

  it('action dÃ©verrouiller ceci avec cela (clÃ© possÃ©dÃ©e et objet dÃ©verrouillable, ouvrable et verrouillÃ© prioritairement fermÃ©)', function () {
    let scenario =
      'action dÃ©verrouiller ceci avec cela:\n' +
      '  dÃ©finitions:\n' +
      '    Ceci est une clÃ©e possÃ©dÃ©e.\n' +
      '    cela est un objet dÃ©verrouillable, ouvrable et verrouillÃ© prioritairement fermÃ©.\n' +
      '  phase exÃ©cution:\n' +
      '    dire "Câ€™est dÃ©verrouillÃ©!"\n' +
      '    changer ceci est dÃ©verrouillÃ©.\n' +
      'fin action\n' +
      '\n' +
      '';

    const res = CompilateurV8.analyserScenarioSeul(scenario, true);
    // vÃ©rifier si on a bien crÃ©Ã© lâ€™action
    expect(res.messages).toHaveSize(0);
    expect(res.actions).toHaveSize(1);
    const monAction = res.actions[0];
    expect(monAction.infinitif).toEqual('dÃ©verrouiller');
    expect(monAction.phaseExecution).toHaveSize(2);
    // complÃ©ment ceci
    expect(monAction.ceci).toBeTrue();
    expect(monAction.cibleCeci).toBeTruthy();
    expect(monAction.cibleCeci.nomEpithete).toBe('clÃ©e possÃ©dÃ©e');
    expect(monAction.cibleCeci.determinant).toBe('une');
    expect(monAction.cibleCeci.nom).toBe('clÃ©e');
    expect(monAction.cibleCeci.epithete).toBe('possÃ©dÃ©e');
    expect(monAction.cibleCeci.priorite).toBeFalsy();
    // complÃ©ment cela
    expect(monAction.cela).toBeTrue();
    expect(monAction.cibleCela).toBeTruthy();
    expect(monAction.cibleCela.nomEpithete).toBe('objet dÃ©verrouillable, ouvrable et verrouillÃ©');
    expect(monAction.cibleCela.determinant).toBe('un');
    expect(monAction.cibleCela.nom).toBe('objet');
    expect(monAction.cibleCela.epithete).toBe('dÃ©verrouillable, ouvrable et verrouillÃ©');
    expect(monAction.cibleCela.priorite).toBe('fermÃ©');

  });

});