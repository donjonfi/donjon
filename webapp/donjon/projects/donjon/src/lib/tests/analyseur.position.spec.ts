import {
  AnalyseurElementPosition,
  AnalyseurUtils,
  AnalyseurV8Definitions,
  CompilateurV8Utils,
  EClasseRacine,
  ElementGenerique,
  Genre,
  Nombre,
  PositionSujetString
} from "../../public-api";

import { ContexteAnalyseV8 } from "../models/compilateur/contexte-analyse-v8";
import { ExprReg } from "../utils/compilation/expr-reg";
import { ResultatAnalysePhrase } from "../models/compilateur/resultat-analyse-phrase";

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
//    [1/2] EXPRESSIONS RÃ‰GULIÃˆRES
// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV


describe('Epressions rÃ©guliÃ¨res âˆ’ DÃ©finition position dâ€™un Ã©lÃ©ment', () => {

  it('def positionâ€¯: Â«â€¯Le chat se trouve sur le divan Â»', () => {
    const result = ExprReg.xDefinirPositionElement.exec('Le chat se trouve sur le divan');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Le chat"); // Ã©lÃ©ment
    expect(result[2]).toEqual("sur le divan"); // position
  });

  it('def positionâ€¯: Â«â€¯Les haricots sauvages se trouvent ici Â»', () => {
    const result = ExprReg.xDefinirPositionElement.exec('Les haricots sauvages se trouvent ici');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Les haricots sauvages"); // Ã©lÃ©ment
    expect(result[2]).toEqual("ici"); // position
  });

  it('def positionâ€¯: Â«â€¯Bob se trouve Ã  lâ€™intÃ©rieur de la cabane hurlante Â»', () => {
    const result = ExprReg.xDefinirPositionElement.exec('Bob se trouve Ã  lâ€™intÃ©rieur de la cabane hurlante');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Bob"); // Ã©lÃ©ment
    expect(result[2]).toEqual("Ã  lâ€™intÃ©rieur de la cabane hurlante"); // position
  });

  it('def positionâ€¯: Â«â€¯La forÃªt se trouve au nord du chemin et au sud de lâ€™abri Â»', () => {
    const result = ExprReg.xDefinirPositionElement.exec('La forÃªt se trouve au nord du chemin et au sud de lâ€™abri');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("La forÃªt"); // Ã©lÃ©ment
    expect(result[2]).toEqual("au nord du chemin et au sud de lâ€™abri"); // position
  });

  it('def positionâ€¯: Â«â€¯Par rapport Ã  la cabane, la forÃªt se trouve au nord, au sud et Ã  lâ€™ouest Â»', () => {
    const result = ExprReg.xDefinirPositionElement.exec('Par rapport Ã  la cabane, la forÃªt se trouve au nord, au sud et Ã  lâ€™ouest');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Par rapport Ã  la cabane, la forÃªt"); // Ã©lÃ©ment
    expect(result[2]).toEqual("au nord, au sud et Ã  lâ€™ouest"); // position
  });

  it('def positionâ€¯: Â«â€¯Il se trouve ici Â»', () => {
    const result = ExprReg.xDefinirPositionElement.exec('Il se trouve ici');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Il"); // Ã©lÃ©ment
    expect(result[2]).toEqual("ici"); // position
  });


});

describe('Epressions rÃ©guliÃ¨res âˆ’ DÃ©finition position dâ€™un Ã©lÃ©ment', () => {

  it('def positionâ€¯: Â«â€¯sur le divan Â»', () => {
    const result = ExprReg.xPositionRelative.exec('sur le divan');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("sur le "); // position suivie
    expect(result[2]).toEqual("divan"); // autre Ã©lÃ©ment
    expect(result[3]).toBeFalsy(); // position solo
  });

  it('def positionâ€¯: Â«â€¯ici Â»', () => {
    const result = ExprReg.xPositionRelative.exec('ici');
    expect(result).not.toEqual(null);
    expect(result[1]).toBeFalsy(); // position suivie
    expect(result[2]).toBeFalsy(); // autre Ã©lÃ©ment
    expect(result[3]).toEqual("ici"); // position solo
  });

  it('def positionâ€¯: Â« dessus Â»', () => {
    const result = ExprReg.xPositionRelative.exec('dessus');
    expect(result).not.toEqual(null);
    expect(result[1]).toBeFalsy(); // position suivie
    expect(result[2]).toBeFalsy(); // autre Ã©lÃ©ment
    expect(result[3]).toEqual("dessus"); // position solo
  });

  it('def positionâ€¯: Â« Ã  lâ€™intÃ©rieur Â»', () => {
    const result = ExprReg.xPositionRelative.exec('Ã  lâ€™intÃ©rieur');
    expect(result).not.toEqual(null);
    expect(result[1]).toBeFalsy(); // position suivie
    expect(result[2]).toBeFalsy(); // autre Ã©lÃ©ment
    expect(result[3]).toEqual("Ã  lâ€™intÃ©rieur"); // position solo
  });

  it('def positionâ€¯: Â«â€¯Ã  lâ€™intÃ©rieur de la cabane hurlante Â»', () => {
    const result = ExprReg.xPositionRelative.exec('Ã  lâ€™intÃ©rieur de la cabane hurlante');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Ã  lâ€™intÃ©rieur de la "); // position suivie
    expect(result[2]).toEqual("cabane hurlante"); // autre Ã©lÃ©ment
    expect(result[3]).toBeFalsy(); // position solo
  });

  it('def positionâ€¯: Â«â€¯au nord du chemin et au sud de lâ€™abri Â» (ðŸ’¥)', () => {
    const result = ExprReg.xPositionRelative.exec('La forÃªt se trouve au nord du chemin et au sud de lâ€™abri');
    expect(result).toEqual(null);
  });

  it('def positionâ€¯: Â«â€¯au nord, au sud et Ã  lâ€™ouest Â» (ðŸ’¥)', () => {
    const result = ExprReg.xPositionRelative.exec('Par rapport Ã  la cabane, la forÃªt se trouve au nord, au sud et Ã  lâ€™ouest');
    expect(result).toEqual(null);
  });

});


describe('Analyseur: objets positionnÃ©s', () => {

  it('Ã‰lÃ©ment pos: Â«â€¯Le cadenas bleu est un objet dans le labo.â€¯Â»', () => {
    let ctxAnalyse = new ContexteAnalyseV8();
    let phrases = CompilateurV8Utils.convertirCodeSourceEnPhrases(
      "Le cadenas bleu est un objet dans le labo."
    );
    expect(phrases).toHaveSize(1); // 1 phrase
    expect(phrases[0].morceaux).toHaveSize(1); // 1 morceau
    // tester lâ€™analyse complÃ¨te
    expect(AnalyseurV8Definitions.testerDefinition(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementAvecPosition);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

    // tester lâ€™analyse spÃ©cifique
    const el = AnalyseurElementPosition.testerElementAvecPosition(phrases[0], ctxAnalyse); // analyser phrase
    expect(el).not.toBeNull(); // Ã©lÃ©ment trouvÃ©
    ctxAnalyse.dernierElementGenerique = el; // dernier Ã©lÃ©ment trouvÃ©
    expect(el.determinant).toEqual('le '); // dÃ©terminant
    expect(el.nom).toEqual('cadenas'); // nom de lâ€™Ã©lÃ©ment
    expect(el.epithete).toEqual('bleu'); // Ã©pithÃ¨te pas dÃ©fini
    expect(el.genre).toEqual(Genre.m); // genre
    expect(el.nombre).toEqual(Nombre.s); // nombre
    expect(el.quantite).toEqual(1); // quantitÃ©
    expect(el.classeIntitule).not.toBeNull(); // intitulÃ© classe dÃ©fini
    expect(el.classeIntitule).toEqual(EClasseRacine.objet); // intitulÃ© classe
    expect(el.positionString).toHaveSize(1); // position dÃ©finie
    expect(el.positionString[0]).toEqual(new PositionSujetString('cadenas bleu', 'labo', 'dans le ')); // position
    AnalyseurUtils.ajouterDescriptionDernierElement(phrases[0], ctxAnalyse); // ajout description Ã©ventuelle
    expect(el.description).toBeNull(); // description pas dÃ©finie
    expect(el.capacites).toHaveSize(0); // aucune capacitÃ©
    expect(el.attributs).toHaveSize(0); // aucun attribut
    expect(el.proprietes).toHaveSize(0); // aucune propriÃ©tÃ©
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

  });

  it('Ã‰lÃ©ment pos: Â«â€¯Le cadenas bleu est un objet. Il se trouve dans le labo.â€¯Â»', () => {
    let ctxAnalyse = new ContexteAnalyseV8();
    let phrases = CompilateurV8Utils.convertirCodeSourceEnPhrases(
      "Le cadenas bleu est un objet. " +
      "Il se trouve dans le labo. " +
      ""
    );
    expect(phrases).toHaveSize(2); // nombre de phrases
    expect(phrases[0].morceaux).toHaveSize(1); // nombre de morceaux
    expect(phrases[1].morceaux).toHaveSize(1); // nombre de morceaux
    // tester lâ€™analyse complÃ¨te
    expect(AnalyseurV8Definitions.testerDefinition(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(AnalyseurV8Definitions.testerDefinition(phrases[1], ctxAnalyse)).toBe(ResultatAnalysePhrase.positionElement);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

    expect(ctxAnalyse.elementsGeneriques).toHaveSize(1); // nombre dâ€™Ã©lÃ©ments gÃ©nÃ©riques
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique); // dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.elIntitule).toBe('cadenas bleu'); // intitulÃ© du dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.positionString).toHaveSize(1); // nombre de positions du dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].sujet).toEqual('cadenas bleu');
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].position).toEqual('dans le ');
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].complement).toEqual('labo');
    expect(ctxAnalyse.dernierLieu).toBeFalsy(); // dernier lieu

  });

  it('Ã‰lÃ©ment pos: Â«â€¯Le labo est un lieu. Le cadenas bleu est un objet. Il se trouve ici.â€¯Â»', () => {
    let ctxAnalyse = new ContexteAnalyseV8();
    let phrases = CompilateurV8Utils.convertirCodeSourceEnPhrases(
      "Le labo est un lieu. " +
      "Le cadenas bleu est un objet. " +
      "Il se trouve ici. " +
      ""
    );
    expect(phrases).toHaveSize(3); // nombre de phrases
    expect(phrases[0].morceaux).toHaveSize(1); // nombre de morceaux
    expect(phrases[1].morceaux).toHaveSize(1); // nombre de morceaux
    expect(phrases[2].morceaux).toHaveSize(1); // nombre de morceaux
    // tester lâ€™analyse complÃ¨te
    expect(AnalyseurV8Definitions.testerDefinition(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(AnalyseurV8Definitions.testerDefinition(phrases[1], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(AnalyseurV8Definitions.testerDefinition(phrases[2], ctxAnalyse)).toBe(ResultatAnalysePhrase.positionElement);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

    expect(ctxAnalyse.elementsGeneriques).toHaveSize(2); // nombre dâ€™Ã©lÃ©ments gÃ©nÃ©riques
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique); // dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.elIntitule).toBe('cadenas bleu'); // intitulÃ© du dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.positionString).toHaveSize(1); // nombre de positions du dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].sujet).toEqual('cadenas bleu');
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].position).toEqual('dans');
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].complement).toEqual('labo');
    expect(ctxAnalyse.dernierLieu).toBeInstanceOf(ElementGenerique); // dernier lieu
    expect(ctxAnalyse.dernierLieu.positionString).toHaveSize(0); // nombre de positions du dernier Ã©lÃ©ment

  });


  it('Ã‰lÃ©ment pos: Â«â€¯La table est un support. Le cadenas bleu est un objet. Il se trouve sur la table.â€¯Â»', () => {
    let ctxAnalyse = new ContexteAnalyseV8();
    let phrases = CompilateurV8Utils.convertirCodeSourceEnPhrases(
      "La table est un support. \n" +
      "Le cadenas bleu est un objet. \n" +
      "Il se trouve sur la table. \n" +
      ""
    );
    expect(phrases).toHaveSize(3); // nombre de phrases
    expect(phrases[0].morceaux).toHaveSize(1); // nombre de morceaux
    expect(phrases[1].morceaux).toHaveSize(1); // nombre de morceaux
    expect(phrases[2].morceaux).toHaveSize(1); // nombre de morceaux
    // tester lâ€™analyse complÃ¨te
    expect(AnalyseurV8Definitions.testerDefinition(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(AnalyseurV8Definitions.testerDefinition(phrases[1], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(AnalyseurV8Definitions.testerDefinition(phrases[2], ctxAnalyse)).toBe(ResultatAnalysePhrase.positionElement);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

    expect(ctxAnalyse.elementsGeneriques).toHaveSize(2); // nombre dâ€™Ã©lÃ©ments gÃ©nÃ©riques
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique); // dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.elIntitule).toBe('cadenas bleu'); // intitulÃ© du dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.positionString).toHaveSize(1); // nombre de positions du dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].sujet).toEqual('cadenas bleu');
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].position).toEqual('sur la ');
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].complement).toEqual('table');
    expect(ctxAnalyse.dernierLieu).toBeFalsy(); // dernier lieu

  });


  it('Ã‰lÃ©ment pos: Â«â€¯La grotte est un lieu. Le coffre est un contenant ici. Lâ€™or est un objet dedans.â€¯Â»', () => {
    let ctxAnalyse = new ContexteAnalyseV8();
    let phrases = CompilateurV8Utils.convertirCodeSourceEnPhrases(
      "La grotte est un lieu. \n" +
      "Le coffre est un contenant ici. \n" +
      "Lâ€™or est dedans. \n" +
      ""
    );
    expect(phrases).toHaveSize(3); // nombre de phrases
    expect(phrases[0].morceaux).toHaveSize(1); // nombre de morceaux
    expect(phrases[1].morceaux).toHaveSize(1); // nombre de morceaux
    expect(phrases[2].morceaux).toHaveSize(1); // nombre de morceaux
    // tester lâ€™analyse complÃ¨te
    expect(AnalyseurV8Definitions.testerDefinition(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(AnalyseurV8Definitions.testerDefinition(phrases[1], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementAvecPosition);
    expect(AnalyseurV8Definitions.testerDefinition(phrases[2], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementAvecPosition);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

    expect(ctxAnalyse.elementsGeneriques).toHaveSize(3); // nombre dâ€™Ã©lÃ©ments gÃ©nÃ©riques
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique); // dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.elIntitule).toBe('or'); // intitulÃ© du dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.positionString).toHaveSize(1); // nombre de positions du dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].sujet).toEqual('or');
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].position).toEqual('dans');
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].complement).toEqual('coffre');
    expect(ctxAnalyse.dernierLieu).toBeInstanceOf(ElementGenerique); // dernier lieu
    expect(ctxAnalyse.dernierLieu.elIntitule).toBe('grotte'); // dernier lieu

  });

  it('Ã‰lÃ©ment pos: Â«â€¯La grotte est un lieu. Le coffre est un contenant ici. Lâ€™or est un objet dedans.â€¯Â»', () => {
    let ctxAnalyse = new ContexteAnalyseV8();
    let phrases = CompilateurV8Utils.convertirCodeSourceEnPhrases(
      "La grotte est un lieu. \n" +
      "Le coffre est un contenant ici. \n" +
      "Lâ€™or est un objet. \n" +
      "Lâ€™or se trouve dans le coffre. \n" +
      ""
    );
    expect(phrases).toHaveSize(4); // nombre de phrases
    // tester lâ€™analyse complÃ¨te
    expect(AnalyseurV8Definitions.testerDefinition(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(AnalyseurV8Definitions.testerDefinition(phrases[1], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementAvecPosition);
    expect(AnalyseurV8Definitions.testerDefinition(phrases[2], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(AnalyseurV8Definitions.testerDefinition(phrases[3], ctxAnalyse)).toBe(ResultatAnalysePhrase.positionElement);
    expect(ctxAnalyse.erreurs).toHaveSize(0); // aucune erreur

    expect(ctxAnalyse.elementsGeneriques).toHaveSize(3); // nombre dâ€™Ã©lÃ©ments gÃ©nÃ©riques
    expect(ctxAnalyse.dernierElementGenerique).toBeInstanceOf(ElementGenerique); // dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.elIntitule).toBe('or'); // intitulÃ© du dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.positionString).toHaveSize(1); // nombre de positions du dernier Ã©lÃ©ment
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].sujet).toEqual('or');
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].position).toEqual('dans le ');
    expect(ctxAnalyse.dernierElementGenerique.positionString[0].complement).toEqual('coffre');
    expect(ctxAnalyse.dernierLieu).toBeInstanceOf(ElementGenerique); // dernier lieu
    expect(ctxAnalyse.dernierLieu.elIntitule).toBe('grotte'); // dernier lieu

  });

  it('Ã‰lÃ©ment pos: Â«â€¯Le coffre est un contenant ici.â€¯Â» (ðŸ’¥)', () => {
    let ctxAnalyse = new ContexteAnalyseV8();
    let phrases = CompilateurV8Utils.convertirCodeSourceEnPhrases(
      "Le coffre est un contenant ici. \n" +
      ""
    );
    expect(phrases).toHaveSize(1); // nombre de phrases
    expect(phrases[0].morceaux).toHaveSize(1); // nombre de morceaux
    // tester lâ€™analyse complÃ¨te
    expect(AnalyseurV8Definitions.testerDefinition(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementAvecPosition);
    expect(ctxAnalyse.erreurs).toHaveSize(1); // erreur car aucun lieu nâ€™est encore dÃ©fini.

  });


  it('Ã‰lÃ©ment pos: Â«â€¯Le coffre est dedans.â€¯Â» (ðŸ’¥)', () => {
    let ctxAnalyse = new ContexteAnalyseV8();
    let phrases = CompilateurV8Utils.convertirCodeSourceEnPhrases(
      "Le coffre est dedans. \n" +
      ""
    );
    expect(phrases).toHaveSize(1); // nombre de phrases
    expect(phrases[0].morceaux).toHaveSize(1); // nombre de morceaux
    // tester lâ€™analyse complÃ¨te
    expect(AnalyseurV8Definitions.testerDefinition(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementAvecPosition);
    expect(ctxAnalyse.erreurs).toHaveSize(1); // erreur car aucun lieu nâ€™est encore dÃ©fini.

  });

  it('Ã‰lÃ©ment pos: Â«â€¯a table est un support. Le cadenas bleu est un objet. Il se trouve dessus.â€¯Â» (ðŸ’¥)', () => {
    let ctxAnalyse = new ContexteAnalyseV8();
    let phrases = CompilateurV8Utils.convertirCodeSourceEnPhrases(
      "La table est un support. \n" +
      "Le cadenas bleu est un objet. \n" +
      "Il se trouve dessus. \n" +
      ""
    );
    expect(phrases).toHaveSize(3); // nombre de phrases
    expect(phrases[0].morceaux).toHaveSize(1); // nombre de morceaux
    expect(phrases[1].morceaux).toHaveSize(1); // nombre de morceaux
    expect(phrases[2].morceaux).toHaveSize(1); // nombre de morceaux
    // tester lâ€™analyse complÃ¨te
    expect(AnalyseurV8Definitions.testerDefinition(phrases[0], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(AnalyseurV8Definitions.testerDefinition(phrases[1], ctxAnalyse)).toBe(ResultatAnalysePhrase.elementSansPosition);
    expect(AnalyseurV8Definitions.testerDefinition(phrases[2], ctxAnalyse)).toBe(ResultatAnalysePhrase.positionElement);
    expect(ctxAnalyse.erreurs).toHaveSize(1); // erreur car le cadenas se rÃ©fÃ©rence lui-mÃªme.

  });

});