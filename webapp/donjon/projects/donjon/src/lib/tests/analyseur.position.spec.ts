import { ExprReg } from "../utils/compilation/expr-reg";

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
//    [1/2] EXPRESSIONS RÃ‰GULIÃˆRES
// â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV


describe('Epressions rÃ©guliÃ¨res âˆ’ DÃ©finition position dâ€™un Ã©lÃ©ment', () => {

  it('def positionâ€¯: Â«â€¯Le chat se trouve sur le divan Â»', () => {
    const result = ExprReg.xDefinirPositionElement.exec('Le chat se trouve sur le divan');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Le chat"); // Ã©lÃ©ment
    expect(result[2]).toEqual("sur le divan"); // position
  });
  
  it('def positionâ€¯: Â«â€¯Les haricots sauvages se trouvent ici Â»', () => {
    const result = ExprReg.xDefinirPositionElement.exec('Les haricots sauvages se trouvent ici');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Les haricots sauvages"); // Ã©lÃ©ment
    expect(result[2]).toEqual("ici"); // position
  });
  
  it('def positionâ€¯: Â«â€¯Bob se trouve Ã  lâ€™intÃ©rieur de la cabane hurlante Â»', () => {
    const result = ExprReg.xDefinirPositionElement.exec('Bob se trouve Ã  lâ€™intÃ©rieur de la cabane hurlante');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Bob"); // Ã©lÃ©ment
    expect(result[2]).toEqual("Ã  lâ€™intÃ©rieur de la cabane hurlante"); // position
  });
  
  it('def positionâ€¯: Â«â€¯La forÃªt se trouve au nord du chemin et au sud de lâ€™abri Â»', () => {
    const result = ExprReg.xDefinirPositionElement.exec('La forÃªt se trouve au nord du chemin et au sud de lâ€™abri');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("La forÃªt"); // Ã©lÃ©ment
    expect(result[2]).toEqual("au nord du chemin et au sud de lâ€™abri"); // position
  });
  
  it('def positionâ€¯: Â«â€¯Par rapport Ã  la cabane, la forÃªt se trouve au nord, au sud et Ã  lâ€™ouest Â»', () => {
    const result = ExprReg.xDefinirPositionElement.exec('Par rapport Ã  la cabane, la forÃªt se trouve au nord, au sud et Ã  lâ€™ouest');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Par rapport Ã  la cabane, la forÃªt"); // Ã©lÃ©ment
    expect(result[2]).toEqual("au nord, au sud et Ã  lâ€™ouest"); // position
  });
  
  it('def positionâ€¯: Â«â€¯Il se trouve ici Â»', () => {
    const result = ExprReg.xDefinirPositionElement.exec('Il se trouve ici');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Il"); // Ã©lÃ©ment
    expect(result[2]).toEqual("ici"); // position
  });
  
  
});

describe('Epressions rÃ©guliÃ¨res âˆ’ DÃ©finition position dâ€™un Ã©lÃ©ment', () => {

  it('def positionâ€¯: Â«â€¯sur le divan Â»', () => {
    const result = ExprReg.xPositionRelative.exec('sur le divan');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("sur le "); // position suivie
    expect(result[2]).toEqual("divan"); // autre Ã©lÃ©ment
    expect(result[3]).toBeFalsy(); // position solo
  });
  
  it('def positionâ€¯: Â«â€¯ici Â»', () => {
    const result = ExprReg.xPositionRelative.exec('ici');
    expect(result).not.toEqual(null);
    expect(result[1]).toBeFalsy(); // position suivie
    expect(result[2]).toBeFalsy(); // autre Ã©lÃ©ment
    expect(result[3]).toEqual("ici"); // position solo
  });
    
  it('def positionâ€¯: Â« dessus Â»', () => {
    const result = ExprReg.xPositionRelative.exec('dessus');
    expect(result).not.toEqual(null);
    expect(result[1]).toBeFalsy(); // position suivie
    expect(result[2]).toBeFalsy(); // autre Ã©lÃ©ment
    expect(result[3]).toEqual("dessus"); // position solo
  });

  it('def positionâ€¯: Â« Ã  lâ€™intÃ©rieur Â»', () => {
    const result = ExprReg.xPositionRelative.exec('Ã  lâ€™intÃ©rieur');
    expect(result).not.toEqual(null);
    expect(result[1]).toBeFalsy(); // position suivie
    expect(result[2]).toBeFalsy(); // autre Ã©lÃ©ment
    expect(result[3]).toEqual("Ã  lâ€™intÃ©rieur"); // position solo
  });

  it('def positionâ€¯: Â«â€¯Ã  lâ€™intÃ©rieur de la cabane hurlante Â»', () => {
    const result = ExprReg.xPositionRelative.exec('Ã  lâ€™intÃ©rieur de la cabane hurlante');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Ã  lâ€™intÃ©rieur de la "); // position suivie
    expect(result[2]).toEqual("cabane hurlante"); // autre Ã©lÃ©ment
    expect(result[3]).toBeFalsy(); // position solo
  });
  
  it('def positionâ€¯: Â«â€¯au nord du chemin et au sud de lâ€™abri Â» (ðŸ’¥)', () => {
    const result = ExprReg.xPositionRelative.exec('La forÃªt se trouve au nord du chemin et au sud de lâ€™abri');
    expect(result).toEqual(null);
  });
  
  it('def positionâ€¯: Â«â€¯au nord, au sud et Ã  lâ€™ouest Â» (ðŸ’¥)', () => {
    const result = ExprReg.xPositionRelative.exec('Par rapport Ã  la cabane, la forÃªt se trouve au nord, au sud et Ã  lâ€™ouest');
    expect(result).toEqual(null);
  });
  
});