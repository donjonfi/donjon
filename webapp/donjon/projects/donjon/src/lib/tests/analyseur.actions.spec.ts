import { ExprReg } from "../utils/compilation/expr-reg";

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
//    [1/1] EXPRESSIONS R√âGULI√àRES
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV


describe('Epressions r√©guli√®res ‚àí Verbes', () => {

  // VERBE √Ä L‚ÄôINFINITIF
  // - verbe(1)

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØmarcher‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("marcher");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("marcher"); // infinitif
  });

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØpartir‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("partir");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("partir"); // infinitif
  });

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØboire‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("boire");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("boire"); // infinitif
  });

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØmarcher‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("marcher");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("marcher"); // infinitif
  });

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØse brosser‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("se brosser");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("se brosser"); // infinitif
  });

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØs‚Äô√©gosiller‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("s‚Äô√©gosiller");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("s‚Äô√©gosiller"); // infinitif
  })

  it('Verbe infinitif‚ÄØ:  ¬´‚ÄØs\'√©veiller‚ÄØ¬ª', () => {
    const result = ExprReg.xVerbeInfinitif.exec("s'√©veiller");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("s'√©veiller"); // infinitif
  });

  it('Verbe infinitif‚ÄØ: ¬´‚ÄØoiseau‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xVerbeInfinitif.exec("oiseau");
    expect(result).toEqual(null);
  });

  it('Verbe infinitif‚ÄØ: ¬´‚ÄØun boucher‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xVerbeInfinitif.exec("un boucher");
    expect(result).toEqual(null);
  });

  it('Verbe infinitif‚ÄØ: ¬´‚ÄØl‚Äôarmurier‚ÄØ¬ª (üí•)', () => {
    const result = ExprReg.xVerbeInfinitif.exec("l‚Äôarmurier");
    expect(result).toEqual(null);
  });

});




describe('Epressions r√©guli√®res ‚àí Action', () => {

  // - verbe(1) [[√†/de/‚Ä¶]\(2) ceci(3)[[ √†/de/sur/‚Ä¶]\(4) cela(5)]] est une action[ qui concerne un|une|deux(6) typeObjetA(7) attributObjetA(8) [prioriteAttributObjetA(9)] [et un|une(10) typeObjetB(11) attributObjetB(12) [prioriteAttributObjetB(13)]]]
  
  it('Action‚ÄØ:  ¬´‚ÄØJeter ceci est une action qui concerne un objet poss√©d√©‚ÄØ¬ª', () => {
    const result = ExprReg.xAction.exec("Jeter ceci est une action qui concerne un objet poss√©d√©");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Jeter"); // verbe
    expect(result[2]).toBeUndefined(); // adverbe ceci
    expect(result[3]).toEqual("ceci"); // ceci
    expect(result[4]).toBeUndefined(); // adverbe cela
    expect(result[5]).toBeUndefined(); // cela
    expect(result[6]).toEqual("un "); // un/une/deux
    expect(result[7]).toEqual("objet"); // classe A
    expect(result[8]).toEqual("poss√©d√©"); // attribut A
    expect(result[9]).toBeUndefined(); // attribut prioritaire A
    expect(result[10]).toBeUndefined(); // un
    expect(result[11]).toBeUndefined(); // classe B
    expect(result[12]).toBeUndefined(); // attribut B
    expect(result[13]).toBeUndefined(); // attribut prioritaire B
  });
  
  it('Action‚ÄØ:  ¬´‚ÄØFrapper sur ceci est une action qui concerne un objet accessible prioritairement disponible‚ÄØ¬ª', () => {
    const result = ExprReg.xAction.exec("Frapper sur ceci est une action qui concerne un objet accessible prioritairement disponible");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Frapper"); // verbe
    expect(result[2]).toEqual("sur"); // adverbe ceci
    expect(result[3]).toEqual("ceci"); // ceci
    expect(result[4]).toBeUndefined(); // adverbe cela
    expect(result[5]).toBeUndefined(); // cela
    expect(result[6]).toEqual("un "); // un/une/deux
    expect(result[7]).toEqual("objet"); // classe A
    expect(result[8]).toEqual("accessible"); // attribut A
    expect(result[9]).toEqual("disponible"); // attribut prioritaire A
    expect(result[10]).toBeUndefined(); // un
    expect(result[11]).toBeUndefined(); // classe B
    expect(result[12]).toBeUndefined(); // attribut B
    expect(result[13]).toBeUndefined(); // attribut prioritaire B
  });

  it('Action‚ÄØ:  ¬´‚ÄØprendre ceci avec cela est une action qui concerne 1 objet prioritairement disponible et un objet visible prioritairement poss√©d√©‚ÄØ¬ª', () => {
    const result = ExprReg.xAction.exec("prendre ceci avec cela est une action qui concerne 1 objet prioritairement disponible et un objet visible prioritairement poss√©d√©");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("prendre"); // verbe
    expect(result[2]).toBeUndefined(); // adverbe ceci
    expect(result[3]).toEqual("ceci"); // ceci
    expect(result[4]).toEqual("avec"); // adverbe cela
    expect(result[5]).toEqual("cela"); // cela
    expect(result[6]).toEqual("1 "); // un/une/deux/1/2
    expect(result[7]).toEqual("objet"); // classe A
    expect(result[8]).toBeUndefined(); // attribut A
    expect(result[9]).toEqual("disponible"); // attribut prioritaire A
    expect(result[10]).toEqual("un "); // un/1
    expect(result[11]).toEqual("objet"); // classe B
    expect(result[12]).toEqual("visible"); // attribut B
    expect(result[13]).toEqual("poss√©d√©"); // attribut prioritaire B
  });

  
  it('Action‚ÄØ:  ¬´‚ÄØAppuyer sur ceci avec cela est une action qui concerne 2 objets accessibles prioritairement poss√©d√©s‚ÄØ¬ª', () => {
    const result = ExprReg.xAction.exec("Appuyer sur ceci et cela est une action qui concerne deux objets accessibles prioritairement poss√©d√©s");
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual("Appuyer"); // verbe
    expect(result[2]).toEqual("sur"); // adverbe ceci
    expect(result[3]).toEqual("ceci"); // ceci
    expect(result[4]).toEqual("et"); // adverbe cela
    expect(result[5]).toEqual("cela"); // cela
    expect(result[6]).toEqual("deux "); // un/une/deux
    expect(result[7]).toEqual("objets"); // classe A + B
    expect(result[8]).toEqual("accessibles"); // attribut A + B
    expect(result[9]).toEqual("poss√©d√©s"); // attribut prioritaire A + B
    expect(result[10]).toBeUndefined(); // un
    expect(result[11]).toBeUndefined(); // classe B
    expect(result[12]).toBeUndefined(); // attribut B
    expect(result[13]).toBeUndefined(); // attribut prioritaire B
  });
  
});

describe('Epressions r√©guli√®res ‚àí Action simplifi√©e', () => {

  // - 
  
  it('Action‚ÄØ:  ¬´‚ÄØLe joueur peut sauter : dire "Je saute !"‚ÄØ¬ª', () => {
    const result = ExprReg.xActionSimplifiee.exec('Le joueur peut sauter : dire "Je saute !"');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual('sauter'); // verbe
    expect(result[2]).toBeUndefined(); // pr√©position
    expect(result[3]).toBeUndefined(); // d√©terminant
    expect(result[4]).toBeUndefined(); // nom
    expect(result[5]).toBeUndefined(); // √©pith√®te
    expect(result[6]).toEqual('dire "Je saute !"'); // instructions
  });
  
  it('Action‚ÄØ:  ¬´‚ÄØLe joueur peut sauter sur la barri√®re : changer la barri√®re n‚Äôest plus intacte; dire "C‚Äôest fait!"‚ÄØ¬ª', () => {
    const result = ExprReg.xActionSimplifiee.exec('Le joueur peut sauter sur la barri√®re : changer la barri√®re n‚Äôest plus intacte; dire "C‚Äôest fait!"');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual('sauter'); // verbe
    expect(result[2]).toEqual('sur'); // pr√©position
    expect(result[3]).toEqual('la '); // d√©terminant
    expect(result[4]).toEqual('barri√®re'); // nom
    expect(result[5]).toBeUndefined(); // √©pith√®te
    expect(result[6]).toEqual('changer la barri√®re n‚Äôest plus intacte; dire "C‚Äôest fait!"'); // instructions
  });

  it('Action‚ÄØ:  ¬´‚ÄØLe joueur peut se currer le nez pointu: dire "√áa n‚Äôest pas hygi√©nique!"‚ÄØ¬ª', () => {
    const result = ExprReg.xActionSimplifiee.exec('Le joueur peut se currer le nez pointu: dire "√áa n‚Äôest pas hygi√©nique!"');
    expect(result).not.toEqual(null);
    expect(result[1]).toEqual('se currer'); // verbe
    expect(result[2]).toBeUndefined(); // pr√©position
    expect(result[3]).toEqual('le '); // d√©terminant
    expect(result[4]).toEqual('nez'); // nom
    expect(result[5]).toEqual('pointu'); // √©pith√®te
    expect(result[6]).toEqual('dire "√áa n‚Äôest pas hygi√©nique!"'); // instructions
  });

});